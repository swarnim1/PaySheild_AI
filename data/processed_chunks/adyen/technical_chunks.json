[
  "üõ†¬† Setup and Configuration \n1. Install Adyen's Python Library \nAdyen provides an official Python library to simplify API interactions. \nbash \nCopyEdit \npip install Adyen \n2. Initialize the Client \nSet up the Adyen client with your API key and environment. \npython \nCopyEdit \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = 'YOUR_API_KEY' \nadyen.client.platform = 'test'  # Use 'live' for production \nadyen.client.merchant_account = 'YOUR_MERCHANT_ACCOUNT' \n \nüí≥ Payment Processing \n1. Create a Payment Session \nInitiate a payment session to start the checkout process.GitHub+1Adyen Docs+1 \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 1000}, \n    \"reference\": \"Your order number\", \n    \"returnUrl\": \"https://your-company.com/checkout?shopperOrder=12xy\", \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.checkout.sessions(request) \n2. Make a Payment \nProcess a payment using the collected payment method details. \npython \nCopyEdit",
  "2. Make a Payment \nProcess a payment using the collected payment method details. \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 1000}, \n    \"reference\": \"Your order number\", \n    \"paymentMethod\": { \n        \"type\": \"scheme\", \n        \"encryptedCardNumber\": \"test_4111111111111111\", \n        \"encryptedExpiryMonth\": \"test_03\", \n        \"encryptedExpiryYear\": \"test_2030\", \n        \"encryptedSecurityCode\": \"test_737\" \n    }, \n    \"returnUrl\": \"https://your-company.com/checkout?shopperOrder=12xy\", \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.checkout.payments(request) \n3. Submit Additional Payment Details \nHandle additional actions like 3D Secure authentication. \npython \nCopyEdit \nrequest = { \n    \"details\": {\"threeds2.fingerprint\": \"fingerprint_value\"}, \n    \"paymentData\": \"Ab02b4c0!BQABAgCW5sx...\"  # From previous response \n} \n \nresponse = adyen.checkout.payments_details(request) \n \nüîÑ Payment Modifications \n1. Capture a Payment",
  "üîÑ Payment Modifications \n1. Capture a Payment \nCapture funds for an authorized payment.Adyen Docs+1Adyen Docs+1 \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 1000}, \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.payment.captures('pspReference', request) \n2. Refund a Payment \nRefund a captured payment. \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 500}, \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.payment.refunds('pspReference', request) \n3. Cancel a Payment \nCancel an authorized payment before capture. \npython \nCopyEdit \nrequest = { \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.payment.cancels('pspReference', request) \n \nüåê Webhooks Integration \nAdyen uses webhooks to notify about payment events.Pipedream+2GitHub+2Adyen Docs+2 \n1. Set Up Webhook Endpoint",
  "1. Set Up Webhook Endpoint \nCreate an endpoint to receive webhook notifications.Adyen Docs+2GitHub+2Adyen Docs+2 \npython \nCopyEdit \nfrom flask import Flask, request \n \napp = Flask(__name__) \n \n@app.route('/webhooks/notifications', methods=['POST']) \ndef webhook(): \n    notification = request.json \n    # Process the notification \n    return '[accepted]' \n2. Verify HMAC Signature  \nEnsure the notification's authenticity by verifying the HMAC signature.GitHub \npython \nCopyEdit \nimport hmac \nimport hashlib \nimport base64 \n \ndef verify_hmac(notification, hmac_key): \n    data = notification['data'] \n    expected_signature = notification['additionalData']['hmacSignature'] \n    message = ':'.join([data['pspReference'], data['originalReference'], \ndata['merchantAccountCode'], str(data['amount']['value']), \ndata['amount']['currency'], data['eventCode'], data['success']]) \n    hmac_calculated = base64.b64encode(hmac.new(base64.b64decode(hmac_key),",
  "hmac_calculated = base64.b64encode(hmac.new(base64.b64decode(hmac_key), \nmessage.encode('utf-8'), hashlib.sha256).digest()).decode() \n    return hmac.compare_digest(hmac_calculated, expected_signature) \n \n¬† Testing and Utilities \nÔÇ∑ \nAPI Explorer: https://docs.adyen.com/api-explorer/GitHubAdyen Docs \nÔÇ∑ \nPostman Collections: https://medium.com/adyen/effortless-api-testing-with-the-\nadyen-postman-collections-52fd3ce3f6a7 \nÔÇ∑ \nTest Card Numbers: https://docs.adyen.com/development-resources/test-cards/test-\ncard-numbers \nüõ†¬† Setup and Configuration \n1. Install Adyen's Python Library \nAdyen provides an official Python library to simplify API interactions. \nbash \nCopyEdit \npip install Adyen \n2. Initialize the Client \nSet up the Adyen client with your API key and environment. \npython \nCopyEdit \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = 'YOUR_API_KEY' \nadyen.client.platform = 'test'  # Use 'live' for production \nadyen.client.merchant_account = 'YOUR_MERCHANT_ACCOUNT'",
  "adyen.client.merchant_account = 'YOUR_MERCHANT_ACCOUNT' \n \nüí≥ Payment Processing \n1. Create a Payment Session \nInitiate a payment session to start the checkout process.GitHub+1Adyen Docs+1 \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 1000}, \n    \"reference\": \"Your order number\", \n    \"returnUrl\": \"https://your-company.com/checkout?shopperOrder=12xy\", \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.checkout.sessions(request) \n2. Make a Payment \nProcess a payment using the collected payment method details. \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 1000}, \n    \"reference\": \"Your order number\", \n    \"paymentMethod\": { \n        \"type\": \"scheme\", \n        \"encryptedCardNumber\": \"test_4111111111111111\", \n        \"encryptedExpiryMonth\": \"test_03\", \n        \"encryptedExpiryYear\": \"test_2030\", \n        \"encryptedSecurityCode\": \"test_737\" \n    },",
  "\"encryptedExpiryYear\": \"test_2030\", \n        \"encryptedSecurityCode\": \"test_737\" \n    }, \n    \"returnUrl\": \"https://your-company.com/checkout?shopperOrder=12xy\", \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.checkout.payments(request) \n3. Submit Additional Payment Details \nHandle additional actions like 3D Secure authentication. \npython \nCopyEdit \nrequest = { \n    \"details\": {\"threeds2.fingerprint\": \"fingerprint_value\"}, \n    \"paymentData\": \"Ab02b4c0!BQABAgCW5sx...\"  # From previous response \n} \n \nresponse = adyen.checkout.payments_details(request) \n \nüîÑ Payment Modifications \n1. Capture a Payment \nCapture funds for an authorized payment.Adyen Docs+1Adyen Docs+1 \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 1000}, \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.payment.captures('pspReference', request) \n2. Refund a Payment \nRefund a captured payment. \npython \nCopyEdit \nrequest = {",
  "2. Refund a Payment \nRefund a captured payment. \npython \nCopyEdit \nrequest = { \n    \"amount\": {\"currency\": \"EUR\", \"value\": 500}, \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.payment.refunds('pspReference', request) \n3. Cancel a Payment \nCancel an authorized payment before capture. \npython \nCopyEdit \nrequest = { \n    \"merchantAccount\": adyen.client.merchant_account \n} \n \nresponse = adyen.payment.cancels('pspReference', request) \n \nüåê Webhooks Integration \nAdyen uses webhooks to notify about payment events.Pipedream+2GitHub+2Adyen Docs+2 \n1. Set Up Webhook Endpoint \nCreate an endpoint to receive webhook notifications.Adyen Docs+2GitHub+2Adyen Docs+2 \npython \nCopyEdit \nfrom flask import Flask, request \n \napp = Flask(__name__) \n \n@app.route('/webhooks/notifications', methods=['POST']) \ndef webhook(): \n    notification = request.json \n    # Process the notification \n    return '[accepted]' \n2. Verify HMAC Signature",
  "# Process the notification \n    return '[accepted]' \n2. Verify HMAC Signature  \nEnsure the notification's authenticity by verifying the HMAC signature.GitHub \npython \nCopyEdit \nimport hmac \nimport hashlib \nimport base64 \n \ndef verify_hmac(notification, hmac_key): \n    data = notification['data'] \n    expected_signature = notification['additionalData']['hmacSignature'] \n    message = ':'.join([data['pspReference'], data['originalReference'], \ndata['merchantAccountCode'], str(data['amount']['value']), \ndata['amount']['currency'], data['eventCode'], data['success']]) \n    hmac_calculated = base64.b64encode(hmac.new(base64.b64decode(hmac_key), \nmessage.encode('utf-8'), hashlib.sha256).digest()).decode() \n    return hmac.compare_digest(hmac_calculated, expected_signature) \n \n¬† Testing and Utilities \nÔÇ∑ \nAPI Explorer: https://docs.adyen.com/api-explorer/GitHubAdyen Docs \nÔÇ∑ \nPostman Collections: https://medium.com/adyen/effortless-api-testing-with-the-",
  "ÔÇ∑ \nPostman Collections: https://medium.com/adyen/effortless-api-testing-with-the-\nadyen-postman-collections-52fd3ce3f6a7 \nÔÇ∑ \nTest Card Numbers: https://docs.adyen.com/development-resources/test-cards/test-\ncard-numbers \n#Python code for create payment session : \n# Adyen Python API Library v13.2.0 \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = \"ADYEN_API_KEY\" \n# For the LIVE environment, also include your liveEndpointUrlPrefix. \nadyen.client.platform = \"test\" # The environment to use library in. \n \n# Create the request object(s) \njson_request = { \n  \"merchantAccount\": \"YOUR_MERCHANT_ACCOUNT\", \n  \"amount\": { \n    \"value\": 100, \n    \"currency\": \"EUR\" \n  }, \n  \"returnUrl\": \"https://your-company.com/checkout?shopperOrder=12xy..\", \n  \"reference\": \"YOUR_PAYMENT_REFERENCE\", \n  \"countryCode\": \"NL\" \n} \n \n# Send the request \nresult = adyen.checkout.payments_api.sessions(request=json_request, idempotency_key=\"UUID\") \n \n \n#Json response payment session created success \n{",
  "#Json response payment session created success \n{ \n  \"amount\": { \n    \"currency\": \"EUR\", \n    \"value\": 100 \n  }, \n  \"countryCode\": \"NL\", \n  \"expiresAt\": \"2022-01-11T13:53:18+01:00\", \n  \"id\": \"CS451F2AB1ED897A94\", \n  \"merchantAccount\": \"YOUR_MERCHANT_ACCOUNT\", \n  \"reference\": \"YOUR_PAYMENT_REFERENCE\", \n  \"returnUrl\": \"https://your-company.com/checkout?shopperOrder=12xy..\", \n  \"sessionData\": \"Ab02b4c0!BQABAgBfYI29...\" \n} \n \n \n#Get list of all payment methods \nGet a list of available payment methods \nPOST/paymentMethods \nAPI Version   \nv71 latest\n \nRetrieves the list of available payment methods for the transaction, based on the transaction information \nlike amount, country, and currency. \nEndpoint destination URL \nhttps://checkout-test.adyen.com/v71/paymentMethods \nClick to copy \nHeader Parameters \nRequired \nOptional \nIdempotency-Keystring \nA unique identifier for the message with a maximum of 64 characters (we recommend a UUID). \nRequest Parameters \nRequired \nOptional",
  "Request Parameters \nRequired \nOptional \nadditionalDataobject \nThis field contains additional data, which may be required for a particular payment request. \nThe additionalData object consists of entries, each of which includes the key and value. \nSelect additionalData\n \nallowedPaymentMethodsarray[string] \nList of payment methods to be presented to the shopper. To refer to payment methods, use their payment \nmethod type. \nExample: \"allowedPaymentMethods\":[\"ideal\",\"giropay\"] \namountobject \nThe amount information for the transaction (in minor units). For BIN or card verification requests, set \namount to 0 (zero). \nShow children \nblockedPaymentMethodsarray[string] \nList of payment methods to be hidden from the shopper. To refer to payment methods, use their payment \nmethod type. \nExample: \"blockedPaymentMethods\":[\"ideal\",\"giropay\"] \nchannelstring \nThe platform where a payment transaction takes place. This field can be used for filtering out payment",
  "methods that are only available on specific platforms. Possible values: \nÔÇ∑ \niOS \nÔÇ∑ \nAndroid \nÔÇ∑ \nWeb \ncountryCodestring \nThe shopper's country code. \nmerchantAccountstringRequired \nThe merchant account identifier, with which you want to process the transaction. \norderobject \nThe order information required for partial payments. \nShow children \nshopperConversionIdstring \nMax length: 256 \nA unique ID that can be used to associate /paymentMethods and /payments requests with the same \nshopper transaction, offering insights into conversion rates. \nshopperLocalestring \nThe combination of a language code and a country code to specify the language to be used in the payment. \nshopperReferencestring \nRequired for recurring payments. Your reference to uniquely identify this shopper, for example user ID or \naccount ID. The value is case-sensitive and must be at least three characters. \nYour reference must not include personally identifiable information (PII) such as name or email address.",
  "splitCardFundingSourcesboolean \nBoolean value indicating whether the card payment method should be split into separate debit and credit \noptions. \nstorestring \nMin length: 1Max length: 16 \nRequired for Adyen for Platforms integrations if you are a platform model. This is \nyour reference (on balance platform) or the storeReference (in the classic integration) for the ecommerce \nor point-of-sale store that is processing the payment. \nstoreFiltrationModestring \nSpecifies how payment methods should be filtered based on the 'store' parameter: \nÔÇ∑ \n'exclusive': Only payment methods belonging to the specified 'store' are returned. \nÔÇ∑ \n'inclusive': Payment methods from the 'store' and those not associated with any other store are returned. \nResponse parameters \nAfter submitting a call, you receive a response message to inform you that your request was received and \nprocessed. \nDepending on the HTTP status code of the response message, it is helpful to build some logic to handle",
  "any errors that a request or the system may return. \nHTTP Responses \nÔÇ∑ \n200 - OK \nThe request has succeeded. \nShow more \nÔÇ∑ \n400 - Bad Request \nA problem reading or understanding the request. \nShow more \nÔÇ∑ \n401 - Unauthorized \nAuthentication required. \nShow more \nÔÇ∑ \n403 - Forbidden \nInsufficient permissions to process the request. \nShow more \nÔÇ∑ \n422 - Unprocessable Entity \nA request validation error. \nShow more \nÔÇ∑ \n500 - Internal Server Error \nThe server could not process the request. \nShow more \n \n#Get Available payment methods \n# Adyen Python API Library v13.2.0 \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = \"ADYEN_API_KEY\" \n# For the LIVE environment, also include your liveEndpointUrlPrefix. \nadyen.client.platform = \"test\" # The environment to use library in. \n \n# Create the request object(s) \njson_request = { \n  \"merchantAccount\": \"YOUR_MERCHANT_ACCOUNT\" \n} \n \n# Send the request \nresult = adyen.checkout.payments_api.payment_methods(request=json_request,",
  "# Send the request \nresult = adyen.checkout.payments_api.payment_methods(request=json_request, \nidempotency_key=\"UUID\") \n \nJson response for list of available payment metholds \n \n{ \n  \"paymentMethods\": [ \n    { \n      \"name\": \"ACH Direct Debit\", \n      \"type\": \"ach\" \n    }, \n    { \n      \"name\": \"Adyen Voucher\", \n      \"type\": \"adyen_test_voucher\" \n    }, \n    { \n      \"name\": \"AfterPay Invoice\", \n      \"type\": \"afterpay_default\" \n    }, \n    { \n      \"name\": \"AfterPay DirectDebit\", \n      \"type\": \"afterpay_directdebit\" \n    }, \n    { \n      \"name\": \"Afterpay\", \n      \"type\": \"afterpaytouch\" \n    }, \n    { \n      \"name\": \"Cards\", \n      \"type\": \"scheme\" \n    }, \n    { \n      \"name\": \"AliPay\", \n      \"type\": \"alipay\" \n    }, \n    { \n      \"name\": \"AliPay HK\", \n      \"type\": \"alipay_hk\" \n    }, \n    { \n      \"name\": \"AliPay\", \n      \"type\": \"alipay_wap\" \n    }, \n    { \n      \"name\": \"Android Pay\", \n      \"type\": \"androidpay\" \n    }, \n    { \n      \"name\": \"Apple Pay\",",
  "\"type\": \"androidpay\" \n    }, \n    { \n      \"name\": \"Apple Pay\", \n      \"type\": \"applepay\" \n    }, \n    { \n      \"name\": \"Credit Card via AsiaPay\", \n      \"type\": \"asiapay\" \n    }, \n    { \n      \"name\": \"China UnionPay\", \n      \"type\": \"asiapay_unionpay\" \n    }, \n    { \n      \"name\": \"Baby Gift Card\", \n      \"type\": \"babygiftcard\" \n    }, \n    { \n      \"name\": \"Baloto\", \n      \"type\": \"baloto\" \n    }, \n    { \n      \"name\": \"BancNet\", \n      \"type\": \"bancnet\" \n    }, \n    { \n      \"name\": \"Bank Transfer (BG)\", \n      \"type\": \"bankTransfer_BG\" \n    }, \n    { \n      \"name\": \"Bank Transfer (CH)\", \n      \"type\": \"bankTransfer_CH\" \n    }, \n    { \n      \"name\": \"Bank Transfer (DE)\", \n      \"type\": \"bankTransfer_DE\" \n    }, \n    { \n      \"name\": \"Bank Transfer (FI)\", \n      \"type\": \"bankTransfer_FI\" \n    }, \n    { \n      \"name\": \"Bank Transfer (GB)\", \n      \"type\": \"bankTransfer_GB\" \n    }, \n    { \n      \"name\": \"Bank Transfer (HU)\", \n      \"type\": \"bankTransfer_HU\" \n    }, \n    {",
  "}, \n    { \n      \"name\": \"Bank Transfer (HU)\", \n      \"type\": \"bankTransfer_HU\" \n    }, \n    { \n      \"name\": \"SEPA Bank Transfer\", \n      \"type\": \"bankTransfer_IBAN\" \n    }, \n    { \n      \"name\": \"Bank Transfer (IE)\", \n      \"type\": \"bankTransfer_IE\" \n    }, \n    { \n      \"name\": \"Electronic Bank Transfer (MX)\", \n      \"type\": \"bankTransfer_MX_linked\" \n    }, \n    { \n      \"name\": \"Bank Transfer (MX)\", \n      \"type\": \"bankTransfer_MX_offline\" \n    }, \n    { \n      \"name\": \"Bank Transfer (NL)\", \n      \"type\": \"bankTransfer_NL\" \n    }, \n    { \n      \"name\": \"Bank Transfer (PL)\", \n      \"type\": \"bankTransfer_PL\" \n    }, \n    { \n      \"name\": \"Bank Transfer (SE)\", \n      \"type\": \"bankTransfer_SE\" \n    }, \n    { \n      \"name\": \"Bank Transfer (US)\", \n      \"type\": \"bankTransfer_US\" \n    }, \n    { \n      \"name\": \"Payconiq by Bancontact\", \n      \"type\": \"bcmc_mobile\" \n    }, \n    { \n      \"name\": \"Bijenkorf Cadeaucard\", \n      \"type\": \"bijcadeaucard\" \n    }, \n    {",
  "}, \n    { \n      \"name\": \"Bijenkorf Cadeaucard\", \n      \"type\": \"bijcadeaucard\" \n    }, \n    { \n      \"name\": \"99Bill\", \n      \"type\": \"bill99\" \n    }, \n    { \n      \"name\": \"Online Banking India\", \n      \"type\": \"billdesk_online\" \n    }, \n    { \n      \"name\": \"UPI\", \n      \"type\": \"billdesk_upi\" \n    }, \n    { \n      \"name\": \"Wallets India\", \n      \"type\": \"billdesk_wallet\" \n    }, \n    { \n      \"name\": \"Blik\", \n      \"type\": \"blik\" \n    }, \n    { \n      \"name\": \"Bloemen Giftcard\", \n      \"type\": \"bloemengiftcard\" \n    }, \n    { \n      \"name\": \"Boekenbon Giftcard\", \n      \"type\": \"boekenbon\" \n    }, \n    { \n      \"name\": \"Boleto\", \n      \"type\": \"boleto\" \n    }, \n    { \n      \"name\": \"Boleto Bancario\", \n      \"type\": \"boletobancario_santander\" \n    }, \n    { \n      \"name\": \"Bradesco\", \n      \"type\": \"bradesco\" \n    }, \n    { \n      \"name\": \"Cash-Ticket\", \n      \"type\": \"cashticket\" \n    }, \n    { \n      \"name\": \"CashU\", \n      \"type\": \"cashu\" \n    }, \n    {",
  "}, \n    { \n      \"name\": \"CashU\", \n      \"type\": \"cashu\" \n    }, \n    { \n      \"name\": \"CCAvenue\", \n      \"type\": \"ccavenue\" \n    }, \n    { \n      \"name\": \"Mula Checkout\", \n      \"type\": \"cellulant\" \n    }, \n    { \n      \"name\": \"Chasin Giftcard\", \n      \"type\": \"chasingiftcard\" \n    }, \n    { \n      \"name\": \"Clearpay\", \n      \"type\": \"clearpay\" \n    }, \n    { \n      \"name\": \"ClickandBuy\", \n      \"type\": \"clickandbuy\" \n    }, \n    { \n      \"name\": \"Paiement en 3 fois par Cartes Bancaires\", \n      \"type\": \"cofinoga_3xcb\" \n    }, \n    { \n      \"name\": \"Costes Giftcard\", \n      \"type\": \"costesgiftcard\" \n    }, \n    { \n      \"name\": \"custom_settlement\", \n      \"type\": \"custom_settlement\" \n    }, \n    { \n      \"name\": \"DANA\", \n      \"type\": \"dana\" \n    }, \n    { \n      \"name\": \"DineroMail\", \n      \"type\": \"dineromail\" \n    }, \n    { \n      \"name\": \"Online bank transfer.\", \n      \"type\": \"directEbanking\" \n    }, \n    { \n      \"name\": \"Direct Debit Brazil - Banco do Brazil\",",
  "}, \n    { \n      \"name\": \"Direct Debit Brazil - Banco do Brazil\", \n      \"type\": \"directdebit_BR_bancodobrasil\" \n    }, \n    { \n      \"name\": \"Direct Debit Brazil - Bradesco\", \n      \"type\": \"directdebit_BR_bradesco\" \n    }, \n    { \n      \"name\": \"Direct Debit Brazil - Caixa Economica Federal\", \n      \"type\": \"directdebit_BR_caixa\" \n    }, \n    { \n      \"name\": \"Direct Debit Brazil - HSBC\", \n      \"type\": \"directdebit_BR_hsbc\" \n    }, \n    { \n      \"name\": \"Direct Debit Brazil - Itau\", \n      \"type\": \"directdebit_BR_itau\" \n    }, \n    { \n      \"name\": \"Direct Debit Brazil - Santander\", \n      \"type\": \"directdebit_BR_santander\" \n    }, \n    { \n      \"name\": \"BACS Direct Debit\", \n      \"type\": \"directdebit_GB\" \n    }, \n    { \n      \"name\": \"Alfamart\", \n      \"type\": \"doku_alfamart\" \n    }, \n    { \n      \"name\": \"BCA Bank Transfer\", \n      \"type\": \"doku_bca_va\" \n    }, \n    { \n      \"name\": \"BNI VA\", \n      \"type\": \"doku_bni_va\" \n    }, \n    { \n      \"name\": \"BRI VA\",",
  "\"name\": \"BNI VA\", \n      \"type\": \"doku_bni_va\" \n    }, \n    { \n      \"name\": \"BRI VA\", \n      \"type\": \"doku_bri_va\" \n    }, \n    { \n      \"name\": \"CIMB VA\", \n      \"type\": \"doku_cimb_va\" \n    }, \n    { \n      \"name\": \"Danamon VA\", \n      \"type\": \"doku_danamon_va\" \n    }, \n    { \n      \"name\": \"Indomaret\", \n      \"type\": \"doku_indomaret\" \n    }, \n    { \n      \"name\": \"Mandiri VA\", \n      \"type\": \"doku_mandiri_va\" \n    }, \n    { \n      \"name\": \"OVO\", \n      \"type\": \"doku_ovo\" \n    }, \n    { \n      \"name\": \"Bank Transfer\", \n      \"type\": \"doku_permata_lite_atm\" \n    }, \n    { \n      \"name\": \"DOKU wallet\", \n      \"type\": \"doku_wallet\" \n    }, \n    { \n      \"name\": \"Local Polish Payment Methods\", \n      \"type\": \"dotpay\" \n    }, \n    { \n      \"name\": \"Dragonpay Prepaid Credits\", \n      \"type\": \"dragonpay_credits\" \n    }, \n    { \n      \"name\": \"Online Banking\", \n      \"type\": \"dragonpay_ebanking\" \n    }, \n    { \n      \"name\": \"GCash\", \n      \"type\": \"dragonpay_gcash\" \n    }, \n    {",
  "}, \n    { \n      \"name\": \"GCash\", \n      \"type\": \"dragonpay_gcash\" \n    }, \n    { \n      \"name\": \"Over The Counter Banks\", \n      \"type\": \"dragonpay_otc_banking\" \n    }, \n    { \n      \"name\": \"OTC non-Bank via Dragonpay\", \n      \"type\": \"dragonpay_otc_non_banking\" \n    }, \n    { \n      \"name\": \"Convenience Stores\", \n      \"type\": \"dragonpay_otc_philippines\" \n    }, \n    { \n      \"name\": \"7/11\", \n      \"type\": \"dragonpay_seveneleven\" \n    }, \n    { \n      \"name\": \"eagleeye_voucher\", \n      \"type\": \"eagleeye_voucher\" \n    }, \n    { \n      \"name\": \"Finnish E-Banking\", \n      \"type\": \"ebanking_FI\" \n    }, \n    { \n      \"name\": \"Pay-easy ATM\", \n      \"type\": \"econtext_atm\" \n    }, \n    { \n      \"name\": \"Online Banking\", \n      \"type\": \"econtext_online\" \n    }, \n    { \n      \"name\": \"7-Eleven\", \n      \"type\": \"econtext_seven_eleven\" \n    }, \n    { \n      \"name\": \"Convenience Stores\", \n      \"type\": \"econtext_stores\" \n    }, \n    { \n      \"name\": \"eft_directdebit_CA\",",
  "\"type\": \"econtext_stores\" \n    }, \n    { \n      \"name\": \"eft_directdebit_CA\", \n      \"type\": \"eft_directdebit_CA\" \n    }, \n    { \n      \"name\": \"Lastschrift (ELV)\", \n      \"type\": \"elv\" \n    }, \n    { \n      \"name\": \"Bank Payment\", \n      \"type\": \"entercash\" \n    }, \n    { \n      \"name\": \"Nationale Entertainment Card\", \n      \"type\": \"entertainmentcard\" \n    }, \n    { \n      \"name\": \"EPS\", \n      \"type\": \"eps\" \n    }, \n    { \n      \"name\": \"Expert Cadeaukaart\", \n      \"type\": \"expertgiftcard\" \n    }, \n    { \n      \"name\": \"3x Oney\", \n      \"type\": \"facilypay_3x\" \n    }, \n    { \n      \"name\": \"4x Oney\", \n      \"type\": \"facilypay_4x\" \n    }, \n    { \n      \"name\": \"Fashioncheque\", \n      \"type\": \"fashioncheque\" \n    }, \n    { \n      \"name\": \"Fawry\", \n      \"type\": \"fawry\" \n    }, \n    { \n      \"name\": \"FijnCadeau\", \n      \"type\": \"fijncadeau\" \n    }, \n    { \n      \"name\": \"Fleurop Bloemenbon\", \n      \"type\": \"fleuropbloemenbon\" \n    }, \n    { \n      \"name\": \"Fonq Giftcard\",",
  "\"type\": \"fleuropbloemenbon\" \n    }, \n    { \n      \"name\": \"Fonq Giftcard\", \n      \"type\": \"fonqgiftcard\" \n    }, \n    { \n      \"name\": \"Gall & Gall\", \n      \"type\": \"gallgall\" \n    }, \n    { \n      \"name\": \"GCash\", \n      \"type\": \"gcash\" \n    }, \n    { \n      \"name\": \"Generic GiftCard\", \n      \"type\": \"genericgiftcard\" \n    }, \n    { \n      \"name\": \"GiftFor2\", \n      \"type\": \"giftfor2card\" \n    }, \n    { \n      \"name\": \"Givex\", \n      \"type\": \"givex\" \n    }, \n    { \n      \"name\": \"Globe GCash\", \n      \"type\": \"globegcash\" \n    }, \n    { \n      \"name\": \"Goldsmiths Card\", \n      \"type\": \"goldsmithscard\" \n    }, \n    { \n      \"name\": \"GoPay Wallet\", \n      \"type\": \"gopay_wallet\" \n    }, \n    { \n      \"name\": \"OVO\", \n      \"type\": \"grabpay_ID\" \n    }, \n    { \n      \"name\": \"GrabPay\", \n      \"type\": \"grabpay_PH\" \n    }, \n    { \n      \"name\": \"GrabPay\", \n      \"type\": \"grabpay_SG\" \n    }, \n    { \n      \"name\": \"Hallmark Card\", \n      \"type\": \"hallmarkcard\" \n    }, \n    {",
  "}, \n    { \n      \"name\": \"Hallmark Card\", \n      \"type\": \"hallmarkcard\" \n    }, \n    { \n      \"name\": \"HDFC\", \n      \"type\": \"hdfc\" \n    }, \n    { \n      \"name\": \"Hunkemoller Member Card\", \n      \"type\": \"hmclub\" \n    }, \n    { \n      \"name\": \"Hunkemoller Lingerie Card\", \n      \"type\": \"hmlingerie\" \n    }, \n    { \n      \"name\": \"iDEAL\", \n      \"type\": \"ideal\" \n    }, \n    { \n      \"name\": \"igive\", \n      \"type\": \"igive\" \n    }, \n    { \n      \"name\": \"Korean Account Transfer (IniPay)\", \n      \"type\": \"inicisIniPay_accounttransfer\" \n    }, \n    { \n      \"name\": \"Korean Credit Cards (IniPay)\", \n      \"type\": \"inicisIniPay_creditcard\" \n    }, \n    { \n      \"name\": \"Korean Mobile Phone (IniPay)\", \n      \"type\": \"inicisIniPay_mobilephone\" \n    }, \n    { \n      \"name\": \"Korean Virtual Account (IniPay)\", \n      \"type\": \"inicisIniPay_virtualaccount\" \n    }, \n    { \n      \"name\": \"Korean Account Transfer (Mobile)\", \n      \"type\": \"inicisMobile_accounttransfer\" \n    }, \n    {",
  "\"type\": \"inicisMobile_accounttransfer\" \n    }, \n    { \n      \"name\": \"Korean Credit Cards (Mobile)\", \n      \"type\": \"inicisMobile_creditcard\" \n    }, \n    { \n      \"name\": \"Korean Mobile Phone (Mobile)\", \n      \"type\": \"inicisMobile_mobilephone\" \n    }, \n    { \n      \"name\": \"Korean Virtual Account (Mobile)\", \n      \"type\": \"inicisMobile_virtualaccount\" \n    }, \n    { \n      \"name\": \"Korean Credit Cards\", \n      \"type\": \"inicis_creditcard\" \n    }, \n    { \n      \"name\": \"Interac¬Æ Online\", \n      \"type\": \"interac\" \n    }, \n    { \n      \"name\": \"Instant EFT\", \n      \"type\": \"ipay\" \n    }, \n    { \n      \"name\": \"iPay88\", \n      \"type\": \"ipay88\" \n    }, \n    { \n      \"name\": \"isracard\", \n      \"type\": \"isracard\" \n    }, \n    { \n      \"name\": \"Phone Payment\", \n      \"type\": \"ivr\" \n    }, \n    { \n      \"name\": \"Landline phone\", \n      \"type\": \"ivrLandline\" \n    }, \n    { \n      \"name\": \"Mobile phone\", \n      \"type\": \"ivrMobile\" \n    }, \n    { \n      \"name\": \"Kado Wereld\",",
  "\"type\": \"ivrMobile\" \n    }, \n    { \n      \"name\": \"Kado Wereld\", \n      \"type\": \"kadowereld\" \n    }, \n    { \n      \"name\": \"KakaoPay\", \n      \"type\": \"kakaopay\" \n    }, \n    { \n      \"name\": \"Karen Millen Card\", \n      \"type\": \"karenmillen\" \n    }, \n    { \n      \"name\": \"Karen Millen GiftCard\", \n      \"type\": \"karenmillengiftcard\" \n    }, \n    { \n      \"name\": \"Bank Transfer\", \n      \"type\": \"kcp_banktransfer\" \n    }, \n    { \n      \"name\": \"Korea‚Äìissued cards\", \n      \"type\": \"kcp_creditcard\" \n    }, \n    { \n      \"name\": \"PayCo\", \n      \"type\": \"kcp_payco\" \n    }, \n    { \n      \"name\": \"Naver Pay\", \n      \"type\": \"kcp_naverpay\" \n    }, \n    { \n      \"name\": \"Virtual Account via KCP\", \n      \"type\": \"kcp_va\" \n    }, \n    { \n      \"name\": \"Pay later with Klarna.\", \n      \"type\": \"klarna\" \n    }, \n    { \n      \"name\": \"Pay over time with Klarna.\", \n      \"type\": \"klarna_account\" \n    }, \n    { \n      \"name\": \"Buy Now, Pay Later with Billie\", \n      \"type\": \"klarna_b2b\" \n    },",
  "}, \n    { \n      \"name\": \"Buy Now, Pay Later with Billie\", \n      \"type\": \"klarna_b2b\" \n    }, \n    { \n      \"name\": \"Pay now with Klarna.\", \n      \"type\": \"klarna_paynow\" \n    }, \n    { \n      \"name\": \"Leisure Card\", \n      \"type\": \"leisurecard\" \n    }, \n    { \n      \"name\": \"China Credit Card\", \n      \"type\": \"lianlianpay_creditcard\" \n    }, \n    { \n      \"name\": \"China Debit Card\", \n      \"type\": \"lianlianpay_debitcard\" \n    }, \n    { \n      \"name\": \"China Online Banking - Credit Card\", \n      \"type\": \"lianlianpay_ebanking_credit\" \n    }, \n    { \n      \"name\": \"China Online Banking - Debit Card\", \n      \"type\": \"lianlianpay_ebanking_debit\" \n    }, \n    { \n      \"name\": \"China Online Banking - Enterprise\", \n      \"type\": \"lianlianpay_ebanking_enterprise\" \n    }, \n    { \n      \"name\": \"Loods5 Cadeaukaart\", \n      \"type\": \"loods5giftcard\" \n    }, \n    { \n      \"name\": \"Loods5 Tegoedbon\", \n      \"type\": \"loods5prepaidcard\" \n    }, \n    { \n      \"name\": \"Love2Shop GiftCard\",",
  "\"type\": \"loods5prepaidcard\" \n    }, \n    { \n      \"name\": \"Love2Shop GiftCard\", \n      \"type\": \"love2shop\" \n    }, \n    { \n      \"name\": \"mada\", \n      \"type\": \"mada\" \n    }, \n    { \n      \"name\": \"Mappin & Webb Card\", \n      \"type\": \"mappinwebbcard\" \n    }, \n    { \n      \"name\": \"MB WAY\", \n      \"type\": \"mbway\" \n    }, \n    { \n      \"name\": \"Amazon Pay\", \n      \"type\": \"amazonpay\" \n    }, \n    { \n      \"name\": \"Mercado Pago\", \n      \"type\": \"mercadopago\" \n    }, \n    { \n      \"name\": \"MobilePay\", \n      \"type\": \"mobilepay\" \n    }, \n    { \n      \"name\": \"AliPay via Razer Merchant Services\", \n      \"type\": \"molpay_alipay\" \n    }, \n    { \n      \"name\": \"7-Eleven\", \n      \"type\": \"molpay_cash\" \n    }, \n    { \n      \"name\": \"CIMB Virtual Account\", \n      \"type\": \"molpay_cimb_va\" \n    }, \n    { \n      \"name\": \"Malaysia E-Banking via Razer Merchant Services\", \n      \"type\": \"molpay_ebanking_MY\" \n    }, \n    { \n      \"name\": \"Vietnam E-Banking\", \n      \"type\": \"molpay_ebanking_VN\"",
  "}, \n    { \n      \"name\": \"Vietnam E-Banking\", \n      \"type\": \"molpay_ebanking_VN\" \n    }, \n    { \n      \"name\": \"Malaysia E-Banking\", \n      \"type\": \"molpay_ebanking_fpx_MY\" \n    }, \n    { \n      \"name\": \"eNETS Debit\", \n      \"type\": \"molpay_enetsd\" \n    }, \n    { \n      \"name\": \"epay\", \n      \"type\": \"molpay_epay\" \n    }, \n    { \n      \"name\": \"Esapay\", \n      \"type\": \"molpay_esapay\" \n    }, \n    { \n      \"name\": \"MyClear FPX\", \n      \"type\": \"molpay_fpx\" \n    }, \n    { \n      \"name\": \"Maybank2u\", \n      \"type\": \"molpay_maybank2u\" \n    }, \n    { \n      \"name\": \"Nganluong\", \n      \"type\": \"molpay_nganluong\" \n    }, \n    { \n      \"name\": \"Convenience Stores Thailand\", \n      \"type\": \"molpay_paysbuy\" \n    }, \n    { \n      \"name\": \"MOLPoints\", \n      \"type\": \"molpay_points\" \n    }, \n    { \n      \"name\": \"RHB Now\", \n      \"type\": \"molpay_rhb\" \n    }, \n    { \n      \"name\": \"SAM by SingPost\", \n      \"type\": \"molpay_singpost\" \n    }, \n    { \n      \"name\": \"MOLWallet\",",
  "\"type\": \"molpay_singpost\" \n    }, \n    { \n      \"name\": \"MOLWallet\", \n      \"type\": \"molpay_wallet\" \n    }, \n    { \n      \"name\": \"MoMo ATM\", \n      \"type\": \"momo_atm\" \n    }, \n    { \n      \"name\": \"Momo Wallet\", \n      \"type\": \"momo_wallet\" \n    }, \n    { \n      \"name\": \"Moneybookers\", \n      \"type\": \"moneybookers\" \n    }, \n    { \n      \"name\": \"Multibanco\", \n      \"type\": \"multibanco\" \n    }, \n    { \n      \"name\": \"De Nationale Musicalcard\", \n      \"type\": \"musicalcard\" \n    }, \n    { \n      \"name\": \"Nationale Bioscoopbon\", \n      \"type\": \"nationalebioscoopbon\" \n    }, \n    { \n      \"name\": \"Nationale Tuinbon\", \n      \"type\": \"nationaletuinbon\" \n    }, \n    { \n      \"name\": \"Nationale Verwen Cadeaubon\", \n      \"type\": \"nationaleverwencadeaubon\" \n    }, \n    { \n      \"name\": \"BankAxess\", \n      \"type\": \"netaxept_bankaxess\" \n    }, \n    { \n      \"name\": \"NETELLER\", \n      \"type\": \"neteller\" \n    }, \n    { \n      \"name\": \"Onebip\", \n      \"type\": \"onebip\" \n    }, \n    {",
  "}, \n    { \n      \"name\": \"Onebip\", \n      \"type\": \"onebip\" \n    }, \n    { \n      \"name\": \"One Two Three\", \n      \"type\": \"onetwothree\" \n    }, \n    { \n      \"name\": \"Online Banking PL\", \n      \"type\": \"onlineBanking_PL\" \n    }, \n    { \n      \"name\": \"Online banking\", \n      \"type\": \"openbanking_UK\" \n    }, \n    { \n      \"name\": \"Oxxo\", \n      \"type\": \"oxxo\" \n    }, \n    { \n      \"name\": \"Pathe Giftcard\", \n      \"type\": \"pathegiftcard\" \n    }, \n    { \n      \"name\": \"PayBright\", \n      \"type\": \"paybright\" \n    }, \n    { \n      \"name\": \"Maya Wallet\", \n      \"type\": \"paymaya_wallet\" \n    }, \n    { \n      \"name\": \"PayPal\", \n      \"type\": \"paypal\" \n    }, \n    { \n      \"name\": \"Paysafecard\", \n      \"type\": \"paysafecard\" \n    }, \n    { \n      \"name\": \"Payshop\", \n      \"type\": \"payshop\" \n    }, \n    { \n      \"name\": \"PayD AMT via Paythru\", \n      \"type\": \"paythru_amt\" \n    }, \n    { \n      \"name\": \"EFT via Paythru\", \n      \"type\": \"paythru_eft\" \n    }, \n    { \n      \"name\": \"PayTM\",",
  "\"type\": \"paythru_eft\" \n    }, \n    { \n      \"name\": \"PayTM\", \n      \"type\": \"paytm\" \n    }, \n    { \n      \"name\": \"PayU UPI\", \n      \"type\": \"payu_IN_upi\" \n    }, \n    { \n      \"name\": \"EFT Pro via PayU\", \n      \"type\": \"payu_ZA_eftpro\" \n    }, \n    { \n      \"name\": \"Google Pay\", \n      \"type\": \"paywithgoogle\" \n    }, \n    { \n      \"name\": \"pix\", \n      \"type\": \"pix\" \n    }, \n    { \n      \"name\": \"Plastix\", \n      \"type\": \"plastix\" \n    }, \n    { \n      \"name\": \"Pluim\", \n      \"type\": \"pluimgiftcard\" \n    }, \n    { \n      \"name\": \"Podium Card\", \n      \"type\": \"podiumcard\" \n    }, \n    { \n      \"name\": \"POLi\", \n      \"type\": \"poli\" \n    }, \n    { \n      \"name\": \"PPS\", \n      \"type\": \"pps\" \n    }, \n    { \n      \"name\": \"Primera Cadeaukaart\", \n      \"type\": \"primeracadeaucard\" \n    }, \n    { \n      \"name\": \"Illicado Gift Card\", \n      \"type\": \"prosodie_illicado\" \n    }, \n    { \n      \"name\": \"PSE\", \n      \"type\": \"pse\" \n    }, \n    { \n      \"name\": \"Qiwi Wallet\",",
  "{ \n      \"name\": \"PSE\", \n      \"type\": \"pse\" \n    }, \n    { \n      \"name\": \"Qiwi Wallet\", \n      \"type\": \"qiwiwallet\" \n    }, \n    { \n      \"name\": \"RatePay Invoice\", \n      \"type\": \"ratepay\" \n    }, \n    { \n      \"name\": \"RatePay Direct Debit\", \n      \"type\": \"ratepay_directdebit\" \n    }, \n    { \n      \"name\": \"Rituals Giftcard\", \n      \"type\": \"rituals\" \n    }, \n    { \n      \"name\": \"Rob Peetoom Giftcard\", \n      \"type\": \"robpeetoomgiftcard\" \n    }, \n    { \n      \"name\": \"SafetyPay\", \n      \"type\": \"safetypay\" \n    }, \n    { \n      \"name\": \"SafetyPay Cash\", \n      \"type\": \"safetypay_cash\" \n    }, \n    { \n      \"name\": \"Shoes&Accessories Cadeau\", \n      \"type\": \"sagiftcard\" \n    }, \n    { \n      \"name\": \"Score Giftcard\", \n      \"type\": \"scoregiftcard\" \n    }, \n    { \n      \"name\": \"SEB Direktbetalning\", \n      \"type\": \"sebdirectpayment\" \n    }, \n    { \n      \"name\": \"SEPA Direct Debit\", \n      \"type\": \"sepadirectdebit\" \n    }, \n    { \n      \"name\": \"7-Eleven\",",
  "\"type\": \"sepadirectdebit\" \n    }, \n    { \n      \"name\": \"7-Eleven\", \n      \"type\": \"seveneleven\" \n    }, \n    { \n      \"name\": \"Premium SMS\", \n      \"type\": \"sms\" \n    }, \n    { \n      \"name\": \"SVS\", \n      \"type\": \"svs\" \n    }, \n    { \n      \"name\": \"Swish\", \n      \"type\": \"swish\" \n    }, \n    { \n      \"name\": \"TCS Test GiftCard\", \n      \"type\": \"tcstestgiftcard\" \n    }, \n    { \n      \"name\": \"TenPay\", \n      \"type\": \"tenpay\" \n    }, \n    { \n      \"name\": \"The Sting Giftcard\", \n      \"type\": \"thestinggiftcard\" \n    }, \n    { \n      \"name\": \"TrueMoney\", \n      \"type\": \"truemoney\" \n    }, \n    { \n      \"name\": \"Trustly\", \n      \"type\": \"trustly\" \n    }, \n    { \n      \"name\": \"Online Banking by Trustpay\", \n      \"type\": \"trustpay\" \n    }, \n    { \n      \"name\": \"TWINT\", \n      \"type\": \"twint\" \n    }, \n    { \n      \"name\": \"Ukash\", \n      \"type\": \"ukash\" \n    }, \n    { \n      \"name\": \"UnionPay\", \n      \"type\": \"unionpay\" \n    }, \n    { \n      \"name\": \"UPI Collect\",",
  "\"name\": \"UnionPay\", \n      \"type\": \"unionpay\" \n    }, \n    { \n      \"name\": \"UPI Collect\", \n      \"type\": \"upi_collect\" \n    }, \n    { \n      \"name\": \"Valuelink\", \n      \"type\": \"valuelink\" \n    }, \n    { \n      \"name\": \"V&D Cadeaukaart\", \n      \"type\": \"vdcadeaucard\" \n    }, \n    { \n      \"name\": \"Vipps\", \n      \"type\": \"vipps\" \n    }, \n    { \n      \"name\": \"Visa Checkout\", \n      \"type\": \"visacheckout\" \n    }, \n    { \n      \"name\": \"VVV Cadeaubon\", \n      \"type\": \"vvvcadeaubon\" \n    }, \n    { \n      \"name\": \"VVV Giftcard\", \n      \"type\": \"vvvgiftcard\" \n    }, \n    { \n      \"name\": \"Webshop Giftcard\", \n      \"type\": \"webshopgiftcard\" \n    }, \n    { \n      \"name\": \"WeChat Pay\", \n      \"type\": \"wechatpayMiniProgram\" \n    }, \n    { \n      \"name\": \"WeChat Pay\", \n      \"type\": \"wechatpayQR\" \n    }, \n    { \n      \"name\": \"WeChat Pay\", \n      \"type\": \"wechatpayWeb\" \n    }, \n    { \n      \"name\": \"WE Fashion Giftcard\", \n      \"type\": \"wefashiongiftcard\" \n    }, \n    {",
  "{ \n      \"name\": \"WE Fashion Giftcard\", \n      \"type\": \"wefashiongiftcard\" \n    }, \n    { \n      \"name\": \"Western Union\", \n      \"type\": \"westernunion\" \n    }, \n    { \n      \"name\": \"Winkel Cheque\", \n      \"type\": \"winkelcheque\" \n    }, \n    { \n      \"name\": \"WOS Card\", \n      \"type\": \"woscard\" \n    }, \n    { \n      \"name\": \"Alfa-Click\", \n      \"type\": \"yandex_alfaclick\" \n    }, \n    { \n      \"name\": \"Pay using bank card\", \n      \"type\": \"yandex_bank_card\" \n    }, \n    { \n      \"name\": \"Cash terminals\", \n      \"type\": \"yandex_cash\" \n    }, \n    { \n      \"name\": \"Pay using installments\", \n      \"type\": \"yandex_installments\" \n    }, \n    { \n      \"name\": \"YooMoney\", \n      \"type\": \"yandex_money\" \n    }, \n    { \n      \"name\": \"Promsvyazbank\", \n      \"type\": \"yandex_promsvyazbank\" \n    }, \n    { \n      \"name\": \"SberPay\", \n      \"type\": \"yandex_sberbank\" \n    }, \n    { \n      \"name\": \"WebMoney\", \n      \"type\": \"yandex_webmoney\" \n    }, \n    { \n      \"name\": \"Your Gift\",",
  "\"type\": \"yandex_webmoney\" \n    }, \n    { \n      \"name\": \"Your Gift\", \n      \"type\": \"yourgift\" \n    }, \n    { \n      \"name\": \"Zip\", \n      \"type\": \"zip\" \n    } \n  ] \n} \n \n#Start transaction  \nStart a transaction \nPOST/payments \nAPI Version   \nv71 latest\n \nSends payment parameters (like amount, country, and currency) together with other required input details \ncollected from the shopper. To know more about required parameters for specific payment methods, refer \nto our payment method guides. The response depends on the payment flow: \nÔÇ∑ \nFor a direct flow, the response includes a pspReference and a resultCode with the payment result, \nfor example Authorised or Refused. \nÔÇ∑ \nFor a redirect or additional action, the response contains an action object. \nEndpoint destination URL \nhttps://checkout-test.adyen.com/v71/payments \nClick to copy \nHeader Parameters \nRequired \nOptional \nIdempotency-Keystring",
  "Click to copy \nHeader Parameters \nRequired \nOptional \nIdempotency-Keystring \nA unique identifier for the message with a maximum of 64 characters (we recommend a UUID). \nRequest Parameters \nRequired \nOptional \naccountInfoobject \nShopper account information for 3D Secure 2. \nFor 3D Secure 2 transactions, we recommend that you include this object to increase the chances of \nachieving a frictionless flow. \nShow children \nadditionalAmountobject \nIf you want a BIN or card verification request to use a non-zero value, assign this value \nto additionalAmount (while the amount must be still set to 0 to trigger BIN or card verification). \nRequired to be in the same currency as the amount. \nShow children \nadditionalDataobject \nThis field contains additional data, which may be required for a particular payment request. \nThe additionalData object consists of entries, each of which includes the key and value. \nSelect additionalData\n \namountobjectRequired",
  "Select additionalData\n \namountobjectRequired \nThe amount information for the transaction (in minor units). For BIN or card verification requests, set \namount to 0 (zero). \nShow children \napplicationInfoobject \nInformation about your application. For more details, see Building Adyen solutions. \nShow children \nauthenticationDataobject \nData for 3DS authentication. \nShow children \nbankAccountobject \nThe details of the bank account, from which the payment should be made. \nEither bankAccount or card field must be provided in a payment request. \nShow children \nbillingAddressobject \nThe address where to send the invoice. \nThe billingAddress object is required in the following scenarios. Include all of the fields within this \nobject. \nÔÇ∑ \nFor 3D Secure 2 transactions in all browser-based and mobile implementations. \nÔÇ∑ \nFor cross-border payouts to and from Canada. \nShow children \nbrowserInfoobject \nThe shopper's browser information.",
  "Show children \nbrowserInfoobject \nThe shopper's browser information. \nFor 3D Secure, the full object is required for web integrations. For mobile app integrations, include \nthe userAgent and acceptHeader fields to indicate that your integration can support a redirect in case \na payment is routed to 3D Secure 2 redirect. \nShow children \ncaptureDelayHoursinteger \nThe delay between the authorisation and scheduled auto-capture, specified in hours. \nchannelstring \nThe platform where a payment transaction takes place. This field is optional for filtering out payment \nmethods that are only available on specific platforms. If this value is not set, then we will try to infer it \nfrom the sdkVersion or token. \nPossible values: \nÔÇ∑ \niOS \nÔÇ∑ \nAndroid \nÔÇ∑ \nWeb \ncheckoutAttemptIdstring \nMax length: 256 \nCheckout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment \njourney. \ncompanyobject \nInformation regarding the company. \nShow children",
  "journey. \ncompanyobject \nInformation regarding the company. \nShow children \nconversionIdstring Deprecated in version 68  \nUse checkoutAttemptId instead \nConversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey. \ncountryCodestring \nMax length: 100 \nThe shopper country. \nFormat: ISO 3166-1 alpha-2 Example: NL or DE \ndateOfBirthstring \nThe shopper's date of birth. \nFormat ISO-8601: YYYY-MM-DD \ndccQuoteobject \nThe forex quote as returned in the response of the forex service. \nShow children \ndeliverAtstring \nThe date and time the purchased goods should be delivered. \nFormat ISO 8601: YYYY-MM-DDThh:mm:ss.sssTZD \nExample: 2017-07-17T13:42:40.428+01:00 \ndeliveryAddressobject \nThe address where the purchased goods should be delivered. \nShow children \ndeliveryDatestring Deprecated in version 70  \nUse deliverAt instead. \nThe date and time the purchased goods should be delivered. \nFormat ISO 8601: YYYY-MM-DDThh:mm:ss.sssTZD",
  "Format ISO 8601: YYYY-MM-DDThh:mm:ss.sssTZD \nExample: 2017-07-17T13:42:40.428+01:00 \ndeviceFingerprintstring \nMax length: 5000 \nA string containing the shopper's device fingerprint. For more information, refer to Device fingerprinting. \nenableOneClickboolean \nWhen true and shopperReference is provided, the shopper will be asked if the payment details should \nbe stored for future one-click payments. \nenablePayOutboolean \nWhen true and shopperReference is provided, the payment details will be tokenized for payouts. \nenableRecurringboolean \nWhen true and shopperReference is provided, the payment details will be stored for recurring \npayments where the shopper is not present, such as subscription or automatic top-up payments. \nentityTypestring \nThe type of the entity the payment is processed for. \nfraudOffsetinteger \nAn integer value that is added to the normal fraud score. The value can be either positive or negative. \nfundOriginobject \nThe person or entity funding the money.",
  "fundOriginobject \nThe person or entity funding the money. \nShow children \nfundRecipientobject \nthe person or entity receiving the money \nShow children \nindustryUsagestring \nThe reason for the amount update. Possible values: \nÔÇ∑ \ndelayedCharge \nÔÇ∑ \nnoShow \nÔÇ∑ \ninstallment \ninstallmentsobject \nContains installment settings. For more information, refer to Installments. \nShow children \nlineItemsarray[object] \nPrice and product information about the purchased items, to be included on the invoice sent to the shopper. \nThis field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip. \nShow children \nlocalizedShopperStatementobject \nThe localizedShopperStatement field lets you use dynamic values for your shopper statement in a \nlocal character set. If not supplied, left empty, or for cross-border transactions, shopperStatement is used. \nAdyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using",
  "Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using \nJapanese cards. This character set supports: \nÔÇ∑ \nUTF-8 based Katakana, capital letters, numbers and special characters. \nÔÇ∑ \nHalf-width or full-width characters. \nmandateobject \nThe mandate details to initiate recurring transaction. \nShow children \nmccstring \nThe merchant category code (MCC) is a four-digit number, which relates to a particular market segment. \nThis code reflects the predominant activity that is conducted by the merchant. \nmerchantAccountstringRequired \nThe merchant account identifier, with which you want to process the transaction. \nmerchantOrderReferencestring \nMax length: 1000 \nThis reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-\nrate). The reference should be unique per billing cycle. The same merchant order reference should never be",
  "reused after the first authorised attempt. If used, this field should be supplied for all incoming \nauthorisations. \nWe strongly recommend you send the merchantOrderReference value to benefit from linking \npayment requests when authorisation retries take place. In addition, we recommend you \nprovide retry.orderAttemptNumber, retry.chainAttemptNumber, \nand retry.skipRetry values in PaymentRequest.additionalData. \nmerchantRiskIndicatorobject \nAdditional risk fields for 3D Secure 2. \nFor 3D Secure 2 transactions, we recommend that you include this object to increase the chances of \nachieving a frictionless flow. \nShow children \nmetadataobject \nMetadata consists of entries, each of which includes a key and a value. Limits: \nÔÇ∑ \nMaximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds \nlimit\". \nÔÇ∑ \nMaximum 20 characters per key. \nÔÇ∑ \nMaximum 80 characters per value. \nmpiDataobject",
  "limit\". \nÔÇ∑ \nMaximum 20 characters per key. \nÔÇ∑ \nMaximum 80 characters per value. \nmpiDataobject \nAuthentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires). \nShow children \norderobject \nThe order information required for partial payments. \nShow children \norderReferencestring \nWhen you are doing multiple partial (gift card) payments, this is the pspReference of the first payment. \nWe use this to link the multiple payments to each other. As your own reference for linking multiple \npayments, use the merchantOrderReferenceinstead. \noriginstring \nMax length: 80 \nRequired for the 3D Secure 2 channel Web integration. \nSet this parameter to the origin URL of the page that you are loading the 3D Secure Component from. \npaymentMethodRequired \nThe type and required details of a payment method to use. \nSelect paymentMethod\n \nplatformChargebackLogicobject \nDefines how to book chargebacks when using Adyen for Platforms. \nShow children \nrecurringExpirystring",
  "Show children \nrecurringExpirystring \nDate after which no further authorisations shall be performed. Only for 3D Secure 2. \nrecurringFrequencystring \nMinimum number of days between authorisations. Only for 3D Secure 2. \nrecurringProcessingModelstring \nDefines a recurring payment type. Required when creating a token to store payment details or using stored \npayment details. Allowed values: \nÔÇ∑ \nSubscription ‚Äì A transaction for a fixed or variable amount, which follows a fixed schedule. \nÔÇ∑ \nCardOnFile ‚Äì With a card-on-file (CoF) transaction, card details are stored to enable one-click or \nomnichannel journeys, or simply to streamline the checkout process. Any subscription not following a \nfixed schedule is also considered a card-on-file transaction. \nÔÇ∑ \nUnscheduledCardOnFile ‚Äì An unscheduled card-on-file (UCoF) transaction is a transaction that \noccurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a",
  "occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a \ncardholder's balance drops below a certain amount. \nredirectFromIssuerMethodstring \nSpecifies the redirect method (GET or POST) when redirecting back from the issuer. \nredirectToIssuerMethodstring \nSpecifies the redirect method (GET or POST) when redirecting to the issuer. \nreferencestringRequired \nThe reference to uniquely identify a payment. This reference is used in all communication with you about \nthe payment status. We recommend using a unique value per payment; however, it is not a requirement. If \nyou need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum \nlength: 80 characters. \nreturnUrlstringRequired \nThe URL to return to in case of a redirection. The format depends on the channel. \nÔÇ∑ \nFor web, include the protocol http:// or https://. You can also include your own additional query",
  "For web, include the protocol http:// or https://. You can also include your own additional query \nparameters, for example, shopper ID or order reference number. Example: https://your-\ncompany.com/checkout?shopperOrder=12xy \nÔÇ∑ \nFor iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to \nthe Apple Developer documentation. Example: my-app:// \nÔÇ∑ \nFor Android, use a custom URL handled by an Activity on your app. You can configure it with an intent \nfilter. Example: my-app://your.package.name \nIf the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the \nvalue. \nThe URL must not include personally identifiable information (PII), for example name or email address. \nriskDataobject \nContains risk data, such as client-side data, used to identify risk for a transaction. \nShow children \nsessionValiditystring \nThe date and time until when the session remains valid, in ISO 8601 format.",
  "sessionValiditystring \nThe date and time until when the session remains valid, in ISO 8601 format. \nFor example: 2020-07-18T15:42:40.428+01:00 \nshopperConversionIdstring \nMax length: 256 \nA unique ID that can be used to associate /paymentMethods and /payments requests with the same \nshopper transaction, offering insights into conversion rates. \nshopperEmailstring \nThe shopper's email address. We recommend that you provide this data, as it is used in velocity fraud \nchecks. \nFor 3D Secure 2 transactions, schemes require shopperEmail for all browser-based and mobile \nimplementations. \nshopperIPstring \nMax length: 1000 \nThe shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of \nrisk checks (for instance, number of payment attempts or location-based checks). \nFor 3D Secure 2 transactions, schemes require shopperIP for all browser-based implementations. This",
  "field is also mandatory for some merchants depending on your business model. For more \ninformation, contact Support. \nshopperInteractionstring \nSpecifies the sales channel, through which the shopper gives their card details, and whether the shopper is \na returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default. \nThis field has the following possible values: \nÔÇ∑ \nEcommerce - Online transactions where the cardholder is present (online). For better authorisation rates, \nwe recommend sending the card security code (CSC) along with the request. \nÔÇ∑ \nContAuth - Card on file and/or subscription transactions, where the cardholder is known to the merchant \n(returning customer). If the shopper is present (online), you can supply also the CSC to improve \nauthorisation (one-click payment). \nÔÇ∑ \nMoto - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via \nemail or telephone. \nÔÇ∑",
  "email or telephone. \nÔÇ∑ \nPOS - Point-of-sale transactions where the shopper is physically present to make a payment using a secure \npayment terminal. \nshopperLocalestring \nThe combination of a language code and a country code to specify the language to be used in the payment. \nshopperNameobject \nThe shopper's full name. \nShow children \nshopperReferencestring \nMin length: 3Max length: 256 \nRequired for recurring payments. Your reference to uniquely identify this shopper, for example user ID or \naccount ID. Minimum length: 3 characters. \nYour reference must not include personally identifiable information (PII), for example name or email \naddress. \nshopperStatementstring \nMax length: 10000 \nThe text to be shown on the shopper's bank statement. We recommend sending a maximum of 22 \ncharacters, otherwise banks might truncate the string. Allowed characters: a-z, A-Z, 0-9, spaces, and \nspecial characters . , ' _ - ? + * /. \nsocialSecurityNumberstring \nThe shopper's social security number.",
  "socialSecurityNumberstring \nThe shopper's social security number. \nsplitsarray[object] \nAn array of objects specifying how to split a payment when using Adyen for Platforms, Classic Platforms \nintegration, or Issuing. \nShow children \nstorestring \nMin length: 1Max length: 64 \nRequired for Adyen for Platforms integrations if you are a platform model. This is \nyour reference (on balance platform) or the storeReference (in the classic integration) for the ecommerce \nor point-of-sale store that is processing the payment. \nstorePaymentMethodboolean \nWhen true and shopperReference is provided, the payment details will be stored for future recurring \npayments. \nsubMerchantsarray[object] \nThis field contains additional information on the submerchant, who is onboarded to an acquirer through a \npayment facilitator or aggregator \nShow children \ntelephoneNumberstring \nThe shopper's telephone number. \nthreeDS2RequestDataobject",
  "Show children \ntelephoneNumberstring \nThe shopper's telephone number. \nthreeDS2RequestDataobject \nRequest fields for 3D Secure 2. To check if any of the following fields are required for your integration, \nrefer to Online payments or Classic integration documentation. \nShow children \nthreeDSAuthenticationOnlyboolean Deprecated in version 69  \nUse authenticationData.authenticationOnly instead. \nIf set to true, you will only perform the 3D Secure 2 authentication, and not the payment authorisation. \ntrustedShopperboolean \nSet to true if the payment should be routed to a trusted MID. \nResponse parameters \nAfter submitting a call, you receive a response message to inform you that your request was received and \nprocessed. \nDepending on the HTTP status code of the response message, it is helpful to build some logic to handle \nany errors that a request or the system may return. \nHTTP Responses \nÔÇ∑ \n200 - OK \nThe request has succeeded. \nShow more \nÔÇ∑ \n400 - Bad Request",
  "HTTP Responses \nÔÇ∑ \n200 - OK \nThe request has succeeded. \nShow more \nÔÇ∑ \n400 - Bad Request \nA problem reading or understanding the request. \nShow more \nÔÇ∑ \n401 - Unauthorized \nAuthentication required. \nShow more \nÔÇ∑ \n403 - Forbidden \nInsufficient permissions to process the request. \nShow more \nÔÇ∑ \n422 - Unprocessable Entity \nA request validation error. \nShow more \nÔÇ∑ \n500 - Internal Server Error \nThe server could not process the request. \n \n \n#Make an apple payment  \n# Adyen Python API Library v13.2.0 \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = \"ADYEN_API_KEY\" \n# For the LIVE environment, also include your liveEndpointUrlPrefix. \nadyen.client.platform = \"test\" # The environment to use library in. \n \n# Create the request object(s) \njson_request = { \n  \"amount\": { \n    \"currency\": \"USD\", \n    \"value\": 1000 \n  }, \n  \"reference\": \"Your order number\", \n  \"paymentMethod\": { \n    \"type\": \"applepay\", \n    \"applePayToken\": \"VNRWtuNlNEWkRCSm1xWndjMDFFbktkQU...\" \n  },",
  "\"type\": \"applepay\", \n    \"applePayToken\": \"VNRWtuNlNEWkRCSm1xWndjMDFFbktkQU...\" \n  }, \n  \"returnUrl\": \"https://your-company.com/...\", \n  \"merchantAccount\": \"YOUR_MERCHANT_ACCOUNT\" \n} \n \n# Send the request \nresult = adyen.checkout.payments_api.payments(request=json_request, idempotency_key=\"UUID\") \n#Submit details of payment  \n \nSubmit details for a payment \nPOST/payments/details \nAPI Version   \nv71 latest\n \nSubmits details for a payment created using /payments. This step is only needed when no final state has \nbeen reached on the /payments request, for example when the shopper was redirected to another page to \ncomplete the payment. \nEndpoint destination URL \nhttps://checkout-test.adyen.com/v71/payments/details \nClick to copy \nHeader Parameters \nRequired \nOptional \nIdempotency-Keystring \nA unique identifier for the message with a maximum of 64 characters (we recommend a UUID). \nRequest Parameters \nRequired \nOptional \nauthenticationDataobject \nData for 3DS authentication.",
  "Request Parameters \nRequired \nOptional \nauthenticationDataobject \nData for 3DS authentication. \nShow children \ndetailsobjectRequired \nUse this collection to submit the details that were returned as a result of the /payments call. \nShow children \npaymentDatastring \nMax length: 200000 \nEncoded payment data. For authorizing a payment after using 3D Secure 2 Authentication-only: \nIf you received resultCode: AuthenticationNotRequired in the /payments response, use \nthe threeDSPaymentData from the same response. \nIf you received resultCode: AuthenticationFinished in the /payments response, use \nthe action.paymentData from the same response. \nthreeDSAuthenticationOnlyboolean Deprecated in version 69  \nUse authenticationData.authenticationOnly instead. \nChange the authenticationOnly indicator originally set in the /payments request. Only needs to be \nset if you want to modify the value set previously. \nResponse parameters",
  "set if you want to modify the value set previously. \nResponse parameters \nAfter submitting a call, you receive a response message to inform you that your request was received and \nprocessed. \nDepending on the HTTP status code of the response message, it is helpful to build some logic to handle \nany errors that a request or the system may return. \nHTTP Responses \nÔÇ∑ \n200 - OK \nThe request has succeeded. \nShow more \nÔÇ∑ \n400 - Bad Request \nA problem reading or understanding the request. \nShow more \nÔÇ∑ \n401 - Unauthorized \nAuthentication required. \nShow more \nÔÇ∑ \n403 - Forbidden \nInsufficient permissions to process the request. \nShow more \nÔÇ∑ \n422 - Unprocessable Entity \nA request validation error. \nShow more \nÔÇ∑ \n500 - Internal Server Error \nThe server could not process the request. \nShow more \n \n#Submit the redirect result  \n# Adyen Python API Library v13.2.0 \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = \"ADYEN_API_KEY\"",
  "import Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = \"ADYEN_API_KEY\" \n# For the LIVE environment, also include your liveEndpointUrlPrefix. \nadyen.client.platform = \"test\" # The environment to use library in. \n \n# Create the request object(s) \njson_request = { \n  \"details\": { \n    \"redirectResult\": \"X6XtfGC3!Y...\" \n  } \n} \n \n# Send the request \nresult = adyen.checkout.payments_api.payments_details(request=json_request, \nidempotency_key=\"UUID\") \n#Json response for payment autharised  \n \n{ \n  \"resultCode\": \"Authorised\", \n  \"pspReference\": \"V4HZ4RBFJGXXGN82\" \n} \n \n#Get list of all the brand on card with unencrypted card number  \n \n# Adyen Python API Library v13.2.0 \nimport Adyen \n \nadyen = Adyen.Adyen() \nadyen.client.xapikey = \"ADYEN_API_KEY\" \n# For the LIVE environment, also include your liveEndpointUrlPrefix. \nadyen.client.platform = \"test\" # The environment to use library in. \n \n# Create the request object(s) \njson_request = { \n  \"merchantAccount\": \"YOUR_MERCHANT_ACCOUNT\",",
  "# Create the request object(s) \njson_request = { \n  \"merchantAccount\": \"YOUR_MERCHANT_ACCOUNT\", \n  \"cardNumber\": \"411111\" \n} \n \n# Send the request \nresult = adyen.checkout.payments_api.card_details(request=json_request, \nidempotency_key=\"UUID\") \n#Json response of list of all the brands on the card  \n{ \n  \"brands\": [ \n    { \n      \"type\": \"visa\", \n      \"supported\": true \n    }, \n    { \n      \"type\": \"cartebancaire\", \n      \"supported\": true \n    } \n  ], \n  \"fundingSource\": \"CREDIT\", \n  \"isCardCommercial\": false, \n  \"issuingCountryCode\": \"FR\" \n} \n \n \nGet the result of a payment session \nGET/sessions/{sessionId} \nAPI Version   \nv71 latest\n \nReturns the status of the payment session with the sessionId and sessionResult specified in the \npath. \nEndpoint destination URL \nhttps://checkout-test.adyen.com/v71/sessions/{sessionId} \nClick to copy \nQuery Parameters \nRequired \nOptional \nsessionResultstringRequired \nThe sessionResult value from the Drop-in or Component. \nPath Parameters",
  "The sessionResult value from the Drop-in or Component. \nPath Parameters \nRequired \nOptional \nsessionIdstringRequired \nA unique identifier of the session. \nResponse parameters \nAfter submitting a call, you receive a response message to inform you that your request was received and \nprocessed. \nDepending on the HTTP status code of the response message, it is helpful to build some logic to handle \nany errors that a request or the system may return. \nHTTP Responses \nÔÇ∑ \n200 - OK \nThe request has succeeded. \nShow more \n \n \n# Json response code 200 success  \n{ \n  \"id\": \"CS12345678\", \n  \"status\": \"completed\" \n}"
]