[
  "Home / Get started / Start developing\nAccept a payment\nSecurely accept payments online.\nCopy page\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\nStripe-hosted page\nEmbedded form\nEmbedded components\nAdvanced integration\nWeb\niOS\nAndroid\nReact Native\nPlugins\nRedirect to a Stripe-hosted payment page using Stripe Checkout. See how this integration\ncompares to Stripe’s other integration types.\nor\nAccept a payment\n​Create account\n​Sign in\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n1/9\nIntegration effort\nLow code\nIntegration type\nRedirect to Stripe-hosted payment page\nUI customization\nFirst, register for a Stripe account.\nUse our official libraries to access the Stripe API from your application:\nLimited customization\nTry it out\nCommand Line\n​Python\n# Install through pip\npip3 install --upgrade stripe\nPyPi\n​Python\n# Or find the Stripe package on http://pypi.python.org/pypi/stripe/",
  "PyPi\n​Python\n# Or find the Stripe package on http://pypi.python.org/pypi/stripe/\nrequirements.txt\n​Python\n# Find the version you want to pin:\n# https://github.com/stripe/stripe-python/blob/master/CHANGELOG.md\n# Specify that version in your requirements.txt file\nstripe>=5.0.0\nAdd a checkout button to your website that calls a server-side endpoint to create a\n.\nYou can also create a Checkout Session for an existing customer, allowing you to prefill\nCheckout fields with known contact information and unify your purchase history for\nthat customer.\n1 Redirect your customer to Stripe Checkout\nClient-side\nServer-side\nCheckout Session\ncheckout.html\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n2/9\nA Checkout Session is the programmatic representation of what your customer sees when\nthey’re redirected to the payment form. You can configure it with options such as:",
  "they’re redirected to the payment form. You can configure it with options such as:\nYou must populate success_url  with the URL value of a page on your website that\nCheckout returns your customer to after they complete the payment. You can optionally\nalso provide a cancel_url  value of a page on your website that Checkout returns your\ncustomer to if they terminate the payment process before completion.\nNote\nCheckout Sessions expire 24 hours after creation by default.\nAfter creating a Checkout Session, redirect your customer to the \n returned in\nthe response.\n<html>\n  <head>\n    <title>Buy cool new product</title>\n  </head>\n  <body>\n    <!-- Use action=\"/create-checkout-session.php\" if your server is PHP based. --\n    <form action=\"/create-checkout-session\" method=\"POST\">\n      <button type=\"submit\">Checkout</button>\n    </form>\n  </body>\n</html>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n to charge\nLine items\nCurrencies to use\nURL\n​Python\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation",
  "Line items\nCurrencies to use\nURL\n​Python\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n3/9\nBy default, Stripe enables cards and other common payment methods. You can turn\nindividual payment methods on or off in the Stripe Dashboard. In Checkout, Stripe\nevaluates the currency and any restrictions, then dynamically presents the supported\npayment methods to the customer.\nTo see how your payment methods appear to customers, enter a transaction ID or set an\norder amount and currency in the Dashboard.\nYou can enable Apple Pay and Google Pay in your payment methods settings. By default,\nApple Pay is enabled and Google Pay is disabled. However, in some cases Stripe filters them\nout even when they’re enabled. We filter Google Pay if you enable automatic tax without\ncollecting a shipping address.\n# This example sets up an endpoint using the Flask framework.\n# Watch this video to get started: https://youtu.be/7Ul1vfmsDck.\nimport os",
  "# Watch this video to get started: https://youtu.be/7Ul1vfmsDck.\nimport os\nimport stripe\nfrom flask import Flask, redirect\napp = Flask(__name__)\nstripe.api_key = \n@app.route('/create-checkout-session', methods=['POST'])\ndef create_checkout_session():\n  session = stripe.checkout.Session.create(\n    line_items=[{\n      'price_data': {\n        'currency': 'usd',\n        'product_data': {\n          'name': 'T-shirt',\n        },\n        'unit_amount': 2000,\n      },\n      'quantity': 1,\n    }],\n    mode='payment',\n    success_url='http://localhost:4242/success',\n    cancel_url='http://localhost:4242/cancel',\n  )\n  return redirect(session.url, code=303)\nif __name__== '__main__':\n    app.run(port=4242)\n'sk_test_tR3PYbcVNZZ796tH88S4VQ2u'\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\nPayment methods\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n4/9",
  "Accept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n4/9\nCheckout’s Stripe-hosted pages don’t need integration changes to enable Apple Pay or\nGoogle Pay. Stripe handles these payments the same way as other card payments.\nConfirm your endpoint is accessible by starting your web server (for example,\nlocalhost:4242 ) and running the following command:\nYou should see a response in your terminal that looks like this:\nYou should now have a working checkout button that redirects your customer to\nStripe Checkout.\nIf your integration isn’t working:\nConfirm your endpoint\nCommand Line\ncurl -X POST -is \"http://localhost:4242/create-checkout-session\" -d \"\"\n$\nCommand Line\nHTTP/1.1 303 See Other\nLocation: https://checkout.stripe.com/c/pay/cs_test_...\n...\n$\n>\n>\nTesting\nClick the checkout button.\n1\nYou’re redirected to the Stripe Checkout payment form.\n2\nOpen the Network tab in your browser’s developer tools.\n1",
  "2\nOpen the Network tab in your browser’s developer tools.\n1\nClick the checkout button and confirm it sent an XHR request to your server-side\nendpoint ( POST /create-checkout-session ).\n2\nVerify the request is returning a 200 status.\n3\nUse console.log(session)  inside your button click listener to confirm the correct\ndata returned.\n4\n2 Show a success page\nClient-side\nServer-side\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n5/9\nIt’s important for your customer to see a success page after they successfully submit the\npayment form. Host this success page on your site.\nCreate a minimal success page:\nNext, update the Checkout Session creation endpoint to use this new page:\nNote\nIf you want to customize your success page, read the custom success page guide.\nsuccess.html\n<html>\n  <head><title>Thanks for your order!</title></head>\n  <body>\n    <h1>Thanks for your order!</h1>\n    <p>\n      We appreciate your business!",
  "<body>\n    <h1>Thanks for your order!</h1>\n    <p>\n      We appreciate your business!\n      If you have any questions, please email\n      <a href=\"mailto:orders@example.com\">orders@example.com</a>.\n    </p>\n  </body>\n</html>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nserver.py\n​Python\n​Resources\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nimport stripe\nstripe.api_key = \nsession =\nstripe.checkout.Session.create(\n  line_items=[\n    {\n      \"price_data\": {\n        \"currency\": \"usd\",\n        \"product_data\": {\"name\": \"T-shirt\"},\n        \"unit_amount\": 2000,\n      },\n      \"quantity\": 1,\n    },\n  ],\n  mode=\"payment\",\n  success_url=\"http://localhost:4242/success.html\",\n  cancel_url=\"http://localhost:4242/cancel.html\",\n)\n\"sk_test_tR3PYbcVNZZ796tH88S4VQ2u\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment",
  "Accept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n6/9\nNext, find the new payment in the Stripe Dashboard. Successful payments appear in the\nDashboard’s list of payments. When you click a payment, it takes you to the payment\ndetails page. The Checkout summary section contains billing information and the list of\nitems purchased, which you can use to manually fulfill the order.\nTesting\nClick your checkout button.\n1\nFill out the payment details with the test card information:\n2\nEnter 4242 4242 4242 4242  as the card number.\nEnter any future date for card expiry.\nEnter any 3-digit number for CVC.\nEnter any billing postal code.\nClick Pay.\n3\nYou’re redirected to your new success page.\n4\nStripe sends a \n event when a customer completes a\nCheckout Session payment. Use the Dashboard webhook tool or follow the webhook guide\nto receive and handle these events, which might trigger you to:",
  "to receive and handle these events, which might trigger you to:\nListen for these events rather than waiting for your customer to be redirected back to your\nwebsite. Triggering fulfillment only from your Checkout landing page is unreliable. Setting\nup your integration to listen for asynchronous events allows you to accept different types\nof payment methods with a single integration.\nLearn more in our fulfillment guide for Checkout.\nHandle the following events when collecting payments with the Checkout:\n3 Handle post-payment events\ncheckout.session.completed\nSend an order confirmation email to your customer.\nLog the sale in a database.\nStart a shipping workflow.\nEVENT\nDESCRIPTION\nACTION\nSent when a\ncustomer\nsuccessfully\nSend the customer\nan order\ncheckout.session.completed\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n7/9\nEVENT\nDESCRIPTION\nACTION\ncompletes a\nCheckout Session.\nconfirmation and\nfulfill their order.\nSent when a",
  "DESCRIPTION\nACTION\ncompletes a\nCheckout Session.\nconfirmation and\nfulfill their order.\nSent when a\npayment made with\na delayed payment\nmethod, such as\nACH direct debt,\nsucceeds.\nSend the customer\nan order\nconfirmation and\nfulfill their order.\nSent when a\npayment made with\na delayed payment\nmethod, such\nas ACH direct\ndebt, fails.\nNotify the customer\nof the failure and\nbring them\nback on-session\nto attempt\npayment again.\ncheckout.session.async_payment_succeeded\ncheckout.session.async_payment_failed\nTo test your Stripe-hosted payment form integration:\nLearn more about testing your integration.\n4 Test your integration\nCreate a Checkout Session.\n1\nFill out the payment details with a method from the following table.\n2\nEnter any future date for card expiry.\nEnter any 3-digit number for CVC.\nEnter any billing postal code.\nClick Pay. You’re redirected to your success_url .\n3\nGo to the Dashboard and look for the payment on the Transactions page. If your",
  "3\nGo to the Dashboard and look for the payment on the Transactions page. If your\npayment succeeded, you’ll see it in that list.\n4\nClick your payment to see more details, like a Checkout summary with billing\ninformation and the list of purchased items. You can use this information to fulfill\nthe order.\n5\nCards\nWallets\nBank redirects\nBank debits\nVouchers\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n8/9\nSee Testing for additional information to test your integration.\nTest cards\nNUMBER\nDESCRIPTION\n4242 4242 4242 4242\nSucceeds and immediately processes the payment.\n4000 0000 0000 3220\nRequires 3D Secure 2 authentication for a\nsuccessful payment.\n4000 0000 0000 9995\nAlways fails with a decline code of insufficient_funds .\nCARD NUMBER\nSCENARIO\nHOW TO TEST\n4242 4242 4242 4242\nThe card payment\nsucceeds and doesn’t\nrequire authentication.\nFill out the credit card form\nusing the credit card number\nwith any expiration, CVC, and",
  "Fill out the credit card form\nusing the credit card number\nwith any expiration, CVC, and\npostal code.\n4000 0025 0000 3155\nThe card payment\nrequires authentication.\nFill out the credit card form\nusing the credit card number\nwith any expiration, CVC, and\npostal code.\n4000 0000 0000 9995\nThe card is declined with\na decline code like\ninsufficient_funds .\nFill out the credit card form\nusing the credit card number\nwith any expiration, CVC, and\npostal code.\n6205 5000 0000 0000 004\nThe UnionPay card has\na variable length of 13-\n19 digits.\nFill out the credit card form\nusing the credit card number\nwith any expiration, CVC, and\npostal code.\n4/20/25, 1:13 PM\nAccept a payment | Stripe Documentation\nhttps://docs.stripe.com/payments/accept-a-payment\n9/9\nHome / Get started / Start developing\nBuild and test new features\nBuild and test new features using the Stripe developer tools.\nCopy page\nUse the Stripe developer tools to integrate new features without interrupting your business",
  "Use the Stripe developer tools to integrate new features without interrupting your business\noperations or compromising customer data. This guide helps you:\nImagine you’re a developer at Kavholm, a furniture company ready to introduce a new\npayment method. This payment method aims to position Kavholm as a market leader and\nimprove customer satisfaction.\nAs you prepare to launch Kavholm’s new payment method, set up a sandbox for thorough\ntesting and monitoring. This isolated environment lets you test features with Stripe\nfunctionality without affecting your live system. You can create multiple sandboxes without\naffecting other users on your account, allowing you to manage isolated environments for\ndevelopment and continuous integration tests. Additionally, you can:\nTest changes without affecting your live system using Sandboxes.\nBuild and manage your integration with Workbench.\nListen to key activities in your Stripe account to automate business processes with\nevent destinations.",
  "event destinations.\nTest with Sandboxes\nSimulate payment scenarios: Experiment with payment processes related to the new\npayment method without making actual transactions. Any settings you configure\nin your sandbox remain isolated to the testing environment and don’t impact your\nlive account.\nChoose a sandbox configuration: Set up a pre-configured sandbox that mirrors some\nsettings of your live account for realistic testing, or select a blank configuration to\nexplore new settings. Learn more about sandbox settings.\nDevelop in a sandbox\nor\nBuild and test new features\n​Create account\n​Sign in\n4/20/25, 1:13 PM\nBuild and test new features | Stripe Documentation\nhttps://docs.stripe.com/get-started/test-developer-integration\n1/5\nTo develop in a sandbox, consider using these features among other available options that\nmight benefit your use case:\nTo collaborate with external partners, such as vendors, assign them the sandbox user role to",
  "To collaborate with external partners, such as vendors, assign them the sandbox user role to\nprovide controlled access for testing, ensuring that live data security isn’t compromised. This\nrole is ideal for external partners and vendors, such as development agencies.\nTo debug and validate your integration, use the following features:\nBy organizing dedicated sandboxes for each testing scenario, you can simulate real-\nworld conditions, monitor functionality, and debug integration issues without risking\nlive operations.\nFor example, you can test all of the payment method functionality before it goes live,\nmonitor integration performance continuously, and implement changes that you’ve vetted\nin an equivalent testing environment.\nTo get started, create a sandbox by navigating to the account picker menu in the Stripe\nDashboard and selecting the Create button. Each sandbox must have a name and can copy\nsettings from the live account to mirror actual conditions.",
  "settings from the live account to mirror actual conditions.\nWith dedicated sandboxes, you can test new features, such as the new payment method,\nthrough various stages such as development, integration testing, and user acceptance\ntesting (UAT). This ensures that each stage receives thorough checks without impacting the\nproduction environment.\nTeam-based sandboxes: Assign dedicated sandboxes for development teams to focus\non specific areas of the payment method integration without interference.\nTest APIs and webhooks: Verify integration logic by testing API calls and webhook\nresponses related to payment method events, such as payment_intent.succeeded .\nCollaborate with external partners\nDebugging and validation\nTroubleshoot and fix bugs: Debug payment method workflow issues by testing API\ncalls or integration logic changes in the sandbox.\nAPI key management: Configure API keys for secure requests in the sandbox, avoiding\nkey-related errors.\nDedicated sandboxes\n4/20/25, 1:13 PM",
  "key-related errors.\nDedicated sandboxes\n4/20/25, 1:13 PM\nBuild and test new features | Stripe Documentation\nhttps://docs.stripe.com/get-started/test-developer-integration\n2/5\nYou can debug and manage your Stripe integration from your browser using Workbench\ndirectly in the Dashboard.\nUse the following views to manage the payment method feature:\nAt Kavholm, use event destinations to make sure all payment method features function as\nintended without affecting your live systems. Use event destinations to track real-time\nBuild and manage your integration with Workbench\nOverview:\nMake sure the new payment method uses the latest and most secure API version.\nMonitor API requests for payment method fee calculations to confirm they\nfunction as expected.\nIdentify integration errors related to the payment method.\nErrors:\nIdentify and categorize errors in payment method calculations or\npayment processing.\nTrack error frequency to understand impact and urgency.\nInspector:",
  "payment processing.\nTrack error frequency to understand impact and urgency.\nInspector:\nAnalyze API object configurations and troubleshoot issues in real-time.\nLogs:\nFilter API requests to make sure interactions align with expectations.\nEvents:\nFilter events to verify logistical triggers.\nReview event payloads to confirm correct back-end processing.\nWebhooks:\nSet up webhook endpoints or other destination types, such as Amazon\nEventBridge, for real-time updates on payment method status and\npayment confirmations.\nShell and API Explorer:\nSimulate API requests and manage them using a command-line interface.\nListen to real-time updates with event destinations\n4/20/25, 1:13 PM\nBuild and test new features | Stripe Documentation\nhttps://docs.stripe.com/get-started/test-developer-integration\n3/5\nactivities in your Stripe account, and to respond to critical events such as payment\nconfirmations or subscription updates. You can:",
  "confirmations or subscription updates. You can:\nTo simulate real-world conditions and evaluate the payment method’s performance before\nit goes live:\nTo track key events and maintain oversight of the payment method feature’s\nongoing functionality:\nTo identify and resolve issues through real-time event analysis and ensure uninterrupted\nservice for Kavholm’s customers:\nWith event destinations, Kavholm tests, monitors, and debugs its new payment method\nwhile minimizing disruptions.\nSandboxes\nSend events to AWS through Amazon EventBridge or to an HTTPS endpoint\nthrough webhooks.\nAccess real-time data using thin or snapshot events.\nTesting\nTest the payment method feature in a sandbox by simulating Stripe-generated events.\nSet up test webhooks to observe event processing without impacting live customers.\nReact to real-time updates\nConfigure event destinations to aggregate and alert you on events such as payment_",
  "Configure event destinations to aggregate and alert you on events such as payment_\nintent.succeeded . Event destinations support receiving alerts at a webhook endpoint\nor Amazon EventBridge.\nView payment event history to troubleshoot payment method processes and track\nevent deliveries. Use logs for debugging, especially when your focus is on event logs\nrather than API request logs.\nDebugging\nQuickly identify billing or payment method issues to alert your customers with specific\nevent notifications.\nUse thin events for real-time analysis of payment method processing.\nSee also\n4/20/25, 1:13 PM\nBuild and test new features | Stripe Documentation\nhttps://docs.stripe.com/get-started/test-developer-integration\n4/5\nE\nD\ni\ni\n4/20/25, 1:13 PM\nBuild and test new features | Stripe Documentation\nhttps://docs.stripe.com/get-started/test-developer-integration\n5/5\nHome / Get started / Start developing\nGo-live checklist\nUse this checklist to ensure a smooth transition when taking\nyour integration live.",
  "Use this checklist to ensure a smooth transition when taking\nyour integration live.\nCopy page\nNote\nBecome a Stripe Partner to access additional best practices and receive relevant news and updates\nfrom Stripe.\nCHECKLIST PROGRESS\nAs you complete each item and check it off, the state of each checkbox is stored within your browser’s\ncache. You can refer back to this page at any time to see what you’ve completed so far.\nYou can log in to see some of your current settings.\nStripe has designed its live and sandbox environments to function as similarly as possible.\nSwitching between them is mostly a matter of swapping your API keys.\nIf you are a developer, or had a developer perform an integration for you, you should also\nconsider the following items before going live. If you’re using Stripe through a connected\nwebsite or a plug-in, most won’t apply.\nSet the API version\nWarning\nAll requests use your account API settings, unless you override the API version. The changelog lists",
  "every available version. Note that by default webhook events are structured according to your\naccount API version, unless you set an API version during \n.\nIf you’re using a strongly typed language (Go, Java, TypeScript, .NET), the server-side\nlibrary pins the API version based on the library version being used. If you’re not familiar\nwith how Stripe manages versioning, please see the versioning docs.\nTo make sure everything is in sync:\nendpoint creation\nUpgrade to the latest API version in Workbench within the Dashboard\nor\nGo-live checklist\n​Create account\n​Sign in\n4/20/25, 1:13 PM\nGo-live checklist | Stripe Documentation\nhttps://docs.stripe.com/get-started/checklist/go-live\n1/3\nFor dynamic languages (Node.js, PHP, Python, Ruby): set the API version in the\nserver-side library\nFor strongly typed languages (Go, Java, TypeScript, .NET): upgrade to the latest\nversion of your chosen library\n4/20/25, 1:13 PM\nGo-live checklist | Stripe Documentation",
  "version of your chosen library\n4/20/25, 1:13 PM\nGo-live checklist | Stripe Documentation\nhttps://docs.stripe.com/get-started/checklist/go-live\n2/3\nHandle edge cases\nWe’ve created several test values you can use to replicate various states and responses.\nBeyond these options, perform your due diligence, testing your integration with:\nIncomplete data\nInvalid data\nDuplicate data (for example, retry the same request to see what happens) We also\nrecommend you have someone else test your integration, especially if that other\nperson isn’t a developer themselves.\nReview your API error handling\nOnce you’ve gone live is an unfortunate time to discover you’ve not properly written\nyour code to handle every possible \n, including those that should “never”\nhappen. Be certain your code is defensive, handling not just the common errors, but\nall possibilities.\nWhen testing your error handling, pay close attention to what information is shown to",
  "When testing your error handling, pay close attention to what information is shown to\nyour users. A card being declined (that is, a card_error ) is a different concern than an\nerror on your backend (for example, an invalid_request_error ).\nerror type\nReview your logging\nStripe logs every request made with your API keys, with these records being viewable in\nthe Dashboard. We recommend that you log all important data on your end, too, despite\nthe apparent redundancy. Your own logs will be a life-saver if your server has a problem\ncontacting Stripe or there’s an issue with your API keys—both cases would prevent us\nfrom logging your request.\n4/20/25, 1:13 PM\nGo-live checklist | Stripe Documentation\nhttps://docs.stripe.com/get-started/checklist/go-live\n3/3\nHome / Get started / Start developing\nSend your first Stripe API request\nGet started with the Stripe API.\nCopy page\nEvery call to a Stripe API must include an API secret key. After you create a Stripe account,",
  "Every call to a Stripe API must include an API secret key. After you create a Stripe account,\nwe generate two pairs of API keys for you—a publishable client-side key and a secret\nserver-side key—for both test and live modes. To start moving real money with your live-\nmode keys, you need to activate your account.\nThis guide walks you through a simple interaction with the Stripe API—creating a customer.\nFor a better understanding of Stripe API objects and how they fit together, take a tour\nof the API or visit the \n. If you’re ready to start accepting payments, see\nour quickstart.\n1 Before you begin\nAPI reference\nYou can begin exploring Stripe APIs using the Stripe Shell. The Stripe Shell allows you\nto execute Stripe CLI commands directly within the Stripe docs site. As it operates in a\nsandbox environment only, you don’t have to worry about initiating any real money-\nmoving transactions.\n2 Send your first API request\nTo \n using the Stripe Shell, enter the following command:",
  "2 Send your first API request\nTo \n using the Stripe Shell, enter the following command:\nIf everything worked, the command line displays the following response:\n1\ncreate a customer\nCommand Line\nstripe customers create --email=jane.smith@email.com --name=\"Jane Smith\" --des\n$\nor\nSend your first API request\n​Create account\n​Sign in\n4/20/25, 1:12 PM\nSend your first Stripe API request | Stripe Documentation\nhttps://docs.stripe.com/get-started/api-request\n1/4\n{\n  \"id\": \"cus_LfctGLAICpokzr\",\n  \"object\": \"customer\",\n1\n2\n3\nSee all 31 lines\n...\n(Optional) Run the same command by passing in your API secret key in a sandbox:\nIf everything worked, the command line displays the following response:\n2\nCommand Line\nstripe customers create --email=jane.smith@email.com --name=\"Jane Smith\" --des\n$\n{\n  \"id\": \"cus_LfdZgLFhah76qf\",\n  \"object\": \"customer\",\n1\n2\n3\nSee all 32 lines\n...\nWhenever you make a call to Stripe APIs, Stripe creates and stores API and",
  "3\nSee all 32 lines\n...\nWhenever you make a call to Stripe APIs, Stripe creates and stores API and \nobjects for your Stripe user account. The API key you specify for the request determines\nwhether the objects are stored in a sandbox environment or in live mode. For example, the\nlast request used your API secret key, so Stripe stored the objects in a sandbox.\n3 View logs and events\nEvents\nTo view the API request log:\nOpen the Logs page.\nClick 200 OK POST /v1 customers.\nTo view the Event log:\nOpen the Events page.\nClick jane.smith@email.com is a new customer.\n4/20/25, 1:12 PM\nSend your first Stripe API request | Stripe Documentation\nhttps://docs.stripe.com/get-started/api-request\n2/4\nBy default, all accounts have a total of four API keys, two in a sandbox and two in live mode:\nYour secret and publishable keys are in the Dashboard in the API keys tab. If you can’t view\nyour API keys, ask the owner of your Stripe account to add you to their team with the\nproper permissions.",
  "proper permissions.\nRestricted API keys\nYou can generate restricted API keys in the Dashboard to enable customizable and limited access to\nthe API. However, Stripe doesn’t offer any restricted keys by default.\nWhen you’re logged in to Stripe, our documentation automatically populates code\nexamples with your test API keys. Only you can see these values. If you’re not logged in, our\ncode examples include randomly generated API keys. You can replace them with your own\ntest keys or log in to see the code examples populated with your test API keys.\nThe following table shows randomly generated examples of secret and publishable test\nAPI keys:\n4 Store your API keys\nSandbox secret key: Use this key to authenticate requests on your server when you’re\ntesting in a sandbox. By default, you can use this key to perform any API request\nwithout restriction. Reserve this key for testing and development to make sure that you\ndon’t accidentally modify your live customers or charges.",
  "don’t accidentally modify your live customers or charges.\nSandbox publishable key: Use this key for testing purposes in your web or mobile\napp’s client-side code. Reserve this key for testing and development to make sure that\nyou don’t accidentally modify your live customers or charges.\nLive mode secret key: Use this key to authenticate requests on your server when in live\nmode. By default, you can use this key to perform any API request without restriction.\nLive mode publishable key: Use this key, when you’re ready to launch your app, in your\nweb or mobile app’s client-side code.\nTYPE\nVALUE\nWHEN TO USE\nSecret\nsk_test_\ntR3PYbcVNZZ796tH88S4VQ2u\nOn the server side: Must be secret and stored\nsecurely in your web or mobile app’s server-side\ncode (such as in an environment variable or\ncredential management system) to call Stripe APIs.\nDon’t expose this key on a website or embed it in a\nmobile application.\n4/20/25, 1:12 PM\nSend your first Stripe API request | Stripe Documentation",
  "mobile application.\n4/20/25, 1:12 PM\nSend your first Stripe API request | Stripe Documentation\nhttps://docs.stripe.com/get-started/api-request\n3/4\nTYPE\nVALUE\nWHEN TO USE\nPublish\nable\npk_test_\n51BTUDGJAJfZb9HEBwDg86TN\n1KNprHjkfipXmEDMb0gSCass\nK5T3ZfxsAbcgKVmAIXF7oZ6I\ntlZZbXO6idTHE67IM007EwQ4\nuN3\nOn the client side: Can be publicly accessible in your\nweb or mobile app’s client-side code (such as\ncheckout.js) to securely collect payment information,\nsuch as with Stripe Elements. By default, Stripe\nCheckout securely collects payment information.\nRestrict\ned\nA string that starts with\nrk_test_\nIn microservices: Must be secret and stored securely\nin your microservice code to call Stripe APIs. Don’t\nexpose this key on a website or embed it in a\nmobile application.\nSee also\n4/20/25, 1:12 PM\nSend your first Stripe API request | Stripe Documentation\nhttps://docs.stripe.com/get-started/api-request\n4/4\nHome / Get started / Start developing\nSet up your development environment",
  "4/4\nHome / Get started / Start developing\nSet up your development environment\nGet familiar with the Stripe CLI and our server-side SDKs.\nCopy page\nNOT A DEVELOPER?\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-\ncertified expert.\nStripe’s server-side SDKs and command-line interface (CLI) allow you to interact with Stripe’s\nREST APIs. Start with the Stripe CLI to streamline your development environment and make\nAPI calls.\nUse the SDKs to avoid writing boilerplate code. To start sending requests from your\nenvironment, choose a language to follow a quickstart guide.\nChrome extensions\nWe recommend you build your payment integration with Stripe (such as Elements or Checkout) on\nyour own website. Then, set up your Chrome extension to send users to this payment page when\nthey’re ready to complete a purchase.\nThis method is more secure and easier to maintain than trying to handle payments directly within\nthe extension.\nRuby\nPython\nGo\nJava",
  "the extension.\nRuby\nPython\nGo\nJava\nNode.js\nPHP\n.NET\nIn this quickstart, you install the Stripe CLI—an essential tool that gets you command line\naccess to your Stripe integration. You also install the Stripe Python server-side SDK to get\naccess to Stripe APIs from applications written in Python.\nIn this quickstart, you’ll learn:\nWhat you learn\nHow to call Stripe APIs without writing a line of code\nor\nSet up your development environment\n​Create account\n​Sign in\n4/20/25, 1:12 PM\nSet up your development environment | Stripe Documentation\nhttps://docs.stripe.com/get-started/development-environment?lang=python\n1/6\nHow to manage third-party dependencies using a virtual environment and the pip\npackage manager\nHow to install the latest Stripe Python SDK v12.0.0\nHow to send your first SDK request\n4/20/25, 1:12 PM\nSet up your development environment | Stripe Documentation\nhttps://docs.stripe.com/get-started/development-environment?lang=python\n2/6\nFirst, create a Stripe account or sign in.",
  "2/6\nFirst, create a Stripe account or sign in.\nInitial setup\nFrom the command-line, use an install script or download and extract a versioned archive\nfile for your operating system to install the CLI.\nLog in and authenticate your Stripe user Account to generate a set of restricted keys. To\nlearn more, see Stripe CLI keys and permissions.\nPress the Enter key on your keyboard to complete the authentication process in\nyour browser.\n1 Set up the Stripe CLI\nInstall\nhomebrew\napt\nyum\nScoop\nmacOS\nLinux\nWindows\nDocker\nAuthenticate\nCommand Line\nstripe login\n$\nTo install the Stripe CLI with homebrew, run:\nThis command fails if you run it on the Linux version of homebrew, but you can use this\nalternative or follow the instructions on the Linux tab.\nCommand Line\nbrew install stripe/stripe-cli/stripe\nCommand Line\nbrew install stripe-cli\n4/20/25, 1:12 PM\nSet up your development environment | Stripe Documentation\nhttps://docs.stripe.com/get-started/development-environment?lang=python\n3/6",
  "https://docs.stripe.com/get-started/development-environment?lang=python\n3/6\nNow that you’ve installed the CLI, you can make a single API request to\n.\nLook for the product identifier (in id ) in the response object. Save it for the next step.\nIf everything worked, the command-line displays the following response.\nNext, call \n to attach a price of 30 USD. Swap the placeholder in product\nwith your product identifier (for example, prod_LTenIrmp8Q67sa ).\nIf everything worked, the command-line displays the following response.\nOutput\nYour pairing code is: enjoy-enough-outwit-win\nThis pairing code verifies your authentication with Stripe.\nPress Enter to open the browser or visit https://dashboard.stripe.com/stripecli/co\n$\n>\n>\nConfirm setup\nCreate a product\nCommand Line\nstripe products create \\\n--name=\"My First Product\" \\\n--description=\"Created with the Stripe CLI\"\n$\n>\n>\n{\n  \"id\": \"prod_LTenIrmp8Q67sa\",\n  \"object\": \"product\",\n1\n2\n3\nSee all 25 lines\n...\nCreate a price\nCommand Line",
  "\"object\": \"product\",\n1\n2\n3\nSee all 25 lines\n...\nCreate a price\nCommand Line\nstripe prices create \\\n  --unit-amount=3000 \\\n  --currency=usd \\\n  --product={{PRODUCT_ID}}\n$\n>\n>\n>\n4/20/25, 1:12 PM\nSet up your development environment | Stripe Documentation\nhttps://docs.stripe.com/get-started/development-environment?lang=python\n4/6\n{\n  \"id\": \"price_1KzlAMJJDeE9fu01WMJJr79o\",\n  \"object\": \"price\",\n1\n2\n3\nSee all 20 lines\n...\nWe recommend managing third-party dependencies using the venv module, which allows\nyou to add new libraries and include them in your Python 3 projects.\n2 Manage third-party dependencies\nOn Windows (cmd.exe):\nCommand Line\npython3 -m venv env\n.\\env\\Scripts\\activate.bat\n$\n>\nOn GNU/Linux or MacOS (bash):\nCommand Line\npython3 -m venv env\nsource env/bin/activate\n$\n>\nThe latest version of the Stripe Python server-side SDK is v12.0.0. It supports Python\nversions 3.6+.\nCheck your Python version:\n3 Install the Python server-side SDK\nCommand Line\npython3 --version\n$",
  "Check your Python version:\n3 Install the Python server-side SDK\nCommand Line\npython3 --version\n$\nInstall the library\n4/20/25, 1:12 PM\nSet up your development environment | Stripe Documentation\nhttps://docs.stripe.com/get-started/development-environment?lang=python\n5/6\nInstall the library from PyPi, a package manager for Python:\nNext, specify the following version in your requirements.txt file:\nCommand Line\npip3 install --upgrade stripe\n$\nrequirements.txt\nstripe>=12.0.0\n1\nInstallation alternatives\nNow that you have the Python SDK installed, you can create a subscription \n and\nattach a \n with a couple API requests. We’re using the product identifier returned in\nthe response to create the price in this example.\nNote\nThis sample uses the default keys of your Stripe user account for your sandbox environment. Only you\ncan see these values.\n4 Run your first SDK request\nProduct\nPrice\ncreate_price.py\nimport stripe\nstripe.api_key = \"sk_test_tR3PYbcVNZZ796tH88S4VQ2u\"",
  "Product\nPrice\ncreate_price.py\nimport stripe\nstripe.api_key = \"sk_test_tR3PYbcVNZZ796tH88S4VQ2u\"\nstarter_subscription = stripe.Product.create(\n  name=\"Starter Subscription\",\n  description=\"$12/Month subscription\",\n1\n2\n3\n4\n5\n6\n4/20/25, 1:12 PM\nSet up your development environment | Stripe Documentation\nhttps://docs.stripe.com/get-started/development-environment?lang=python\n6/6"
]